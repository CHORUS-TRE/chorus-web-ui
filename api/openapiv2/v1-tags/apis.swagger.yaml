swagger: "2.0"
info:
  title: CHORUS backend API
  description: CHORUS backend API documentation
  version: "1.0"
  contact:
    name: CHORUS dev team
    url: https://www.chorus-tre.ch
tags:
  - name: AppInstanceService
  - name: AppService
  - name: AuthenticationService
  - name: HealthService
  - name: NotificationService
  - name: StewardService
  - name: UserService
  - name: WorkbenchService
  - name: WorkspaceService
schemes:
  - http
  - https
consumes:
  - application/json
produces:
  - application/json
paths:
  /api/rest/v1/app-instances:
    get:
      summary: List app instances
      description: This endpoint returns a list of app instances
      operationId: AppInstanceService_ListAppInstances
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/chorusListAppInstancesReply'
        "400":
          description: 'Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing)'
          schema: {}
        "401":
          description: 'Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource'
          schema: {}
        "403":
          description: 'Forbidden: indicates that the server understands the request but refuses to authorize it'
          schema: {}
        "404":
          description: 'Not Found: indicates that the server cannot find the requested resource'
          schema: {}
        "500":
          description: 'Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request'
          schema: {}
        "503":
          description: 'Service Unavailable: indicates that the server is not ready to handle the request.'
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: pagination.offset
          description: Optionally offset the number of results
          in: query
          required: false
          type: integer
          format: int64
        - name: pagination.limit
          description: Optionally limit the number of results (between 1 and 500)
          in: query
          required: false
          type: integer
          format: int64
        - name: pagination.sort.order
          in: query
          required: false
          type: string
        - name: pagination.sort.type
          in: query
          required: false
          type: string
        - name: pagination.query
          description: Optionally filter the results
          in: query
          required: false
          type: array
          items:
            type: string
          collectionFormat: multi
          x-example:
            - user_id=9999
            - status=STATUS_CREATED,STATUS_CLOSED
      tags:
        - AppInstanceService
    post:
      summary: Create an app instance
      description: This endpoint creates an app instance
      operationId: AppInstanceService_CreateAppInstance
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/chorusCreateAppInstanceReply'
        "400":
          description: 'Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing)'
          schema: {}
        "401":
          description: 'Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource'
          schema: {}
        "403":
          description: 'Forbidden: indicates that the server understands the request but refuses to authorize it'
          schema: {}
        "404":
          description: 'Not Found: indicates that the server cannot find the requested resource'
          schema: {}
        "500":
          description: 'Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request'
          schema: {}
        "503":
          description: 'Service Unavailable: indicates that the server is not ready to handle the request.'
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/chorusAppInstance'
      tags:
        - AppInstanceService
    put:
      summary: Update an app instance
      description: This endpoint updates an app instance
      operationId: AppInstanceService_UpdateAppInstance
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/chorusUpdateAppInstanceReply'
        "400":
          description: 'Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing)'
          schema: {}
        "401":
          description: 'Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource'
          schema: {}
        "403":
          description: 'Forbidden: indicates that the server understands the request but refuses to authorize it'
          schema: {}
        "404":
          description: 'Not Found: indicates that the server cannot find the requested resource'
          schema: {}
        "500":
          description: 'Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request'
          schema: {}
        "503":
          description: 'Service Unavailable: indicates that the server is not ready to handle the request.'
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/chorusUpdateAppInstanceRequest'
      tags:
        - AppInstanceService
  /api/rest/v1/app-instances/{id}:
    get:
      summary: Get an app instance
      description: This endpoint returns an app instance
      operationId: AppInstanceService_GetAppInstance
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/chorusGetAppInstanceReply'
        "400":
          description: 'Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing)'
          schema: {}
        "401":
          description: 'Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource'
          schema: {}
        "403":
          description: 'Forbidden: indicates that the server understands the request but refuses to authorize it'
          schema: {}
        "404":
          description: 'Not Found: indicates that the server cannot find the requested resource'
          schema: {}
        "500":
          description: 'Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request'
          schema: {}
        "503":
          description: 'Service Unavailable: indicates that the server is not ready to handle the request.'
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: id
          in: path
          required: true
          type: string
          format: uint64
      tags:
        - AppInstanceService
    delete:
      summary: Delete an app instance
      description: This endpoint deletes an app instance
      operationId: AppInstanceService_DeleteAppInstance
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/chorusDeleteAppInstanceReply'
        "400":
          description: 'Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing)'
          schema: {}
        "401":
          description: 'Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource'
          schema: {}
        "403":
          description: 'Forbidden: indicates that the server understands the request but refuses to authorize it'
          schema: {}
        "404":
          description: 'Not Found: indicates that the server cannot find the requested resource'
          schema: {}
        "500":
          description: 'Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request'
          schema: {}
        "503":
          description: 'Service Unavailable: indicates that the server is not ready to handle the request.'
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: id
          in: path
          required: true
          type: string
          format: uint64
      tags:
        - AppInstanceService
  /api/rest/v1/apps:
    get:
      summary: List apps
      description: This endpoint returns a list of apps
      operationId: AppService_ListApps
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/chorusListAppsReply'
        "400":
          description: 'Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing)'
          schema: {}
        "401":
          description: 'Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource'
          schema: {}
        "403":
          description: 'Forbidden: indicates that the server understands the request but refuses to authorize it'
          schema: {}
        "404":
          description: 'Not Found: indicates that the server cannot find the requested resource'
          schema: {}
        "500":
          description: 'Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request'
          schema: {}
        "503":
          description: 'Service Unavailable: indicates that the server is not ready to handle the request.'
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: pagination.offset
          description: Optionally offset the number of results
          in: query
          required: false
          type: integer
          format: int64
        - name: pagination.limit
          description: Optionally limit the number of results (between 1 and 500)
          in: query
          required: false
          type: integer
          format: int64
        - name: pagination.sort.order
          in: query
          required: false
          type: string
        - name: pagination.sort.type
          in: query
          required: false
          type: string
        - name: pagination.query
          description: Optionally filter the results
          in: query
          required: false
          type: array
          items:
            type: string
          collectionFormat: multi
          x-example:
            - user_id=9999
            - status=STATUS_CREATED,STATUS_CLOSED
      tags:
        - AppService
    post:
      summary: Create an app
      description: This endpoint creates an app
      operationId: AppService_CreateApp
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/chorusCreateAppReply'
        "400":
          description: 'Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing)'
          schema: {}
        "401":
          description: 'Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource'
          schema: {}
        "403":
          description: 'Forbidden: indicates that the server understands the request but refuses to authorize it'
          schema: {}
        "404":
          description: 'Not Found: indicates that the server cannot find the requested resource'
          schema: {}
        "500":
          description: 'Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request'
          schema: {}
        "503":
          description: 'Service Unavailable: indicates that the server is not ready to handle the request.'
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/chorusApp'
      tags:
        - AppService
    put:
      summary: Update an app
      description: This endpoint updates an app
      operationId: AppService_UpdateApp
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/chorusUpdateAppReply'
        "400":
          description: 'Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing)'
          schema: {}
        "401":
          description: 'Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource'
          schema: {}
        "403":
          description: 'Forbidden: indicates that the server understands the request but refuses to authorize it'
          schema: {}
        "404":
          description: 'Not Found: indicates that the server cannot find the requested resource'
          schema: {}
        "500":
          description: 'Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request'
          schema: {}
        "503":
          description: 'Service Unavailable: indicates that the server is not ready to handle the request.'
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/chorusUpdateAppRequest'
      tags:
        - AppService
  /api/rest/v1/apps/{id}:
    get:
      summary: Get an app
      description: This endpoint returns an app
      operationId: AppService_GetApp
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/chorusGetAppReply'
        "400":
          description: 'Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing)'
          schema: {}
        "401":
          description: 'Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource'
          schema: {}
        "403":
          description: 'Forbidden: indicates that the server understands the request but refuses to authorize it'
          schema: {}
        "404":
          description: 'Not Found: indicates that the server cannot find the requested resource'
          schema: {}
        "500":
          description: 'Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request'
          schema: {}
        "503":
          description: 'Service Unavailable: indicates that the server is not ready to handle the request.'
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: id
          in: path
          required: true
          type: string
          format: uint64
      tags:
        - AppService
    delete:
      summary: Delete an app
      description: This endpoint deletes an app
      operationId: AppService_DeleteApp
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/chorusDeleteAppReply'
        "400":
          description: 'Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing)'
          schema: {}
        "401":
          description: 'Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource'
          schema: {}
        "403":
          description: 'Forbidden: indicates that the server understands the request but refuses to authorize it'
          schema: {}
        "404":
          description: 'Not Found: indicates that the server cannot find the requested resource'
          schema: {}
        "500":
          description: 'Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request'
          schema: {}
        "503":
          description: 'Service Unavailable: indicates that the server is not ready to handle the request.'
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: id
          in: path
          required: true
          type: string
          format: uint64
      tags:
        - AppService
  /api/rest/v1/authentication/login:
    post:
      summary: Authenticate
      description: This endpoint authenticates a user
      operationId: AuthenticationService_Authenticate
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/chorusAuthenticationReply'
        "400":
          description: 'Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing)'
          schema: {}
        "401":
          description: 'Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource'
          schema: {}
        "403":
          description: 'Forbidden: indicates that the server understands the request but refuses to authorize it'
          schema: {}
        "404":
          description: 'Not Found: indicates that the server cannot find the requested resource'
          schema: {}
        "500":
          description: 'Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request'
          schema: {}
        "503":
          description: 'Service Unavailable: indicates that the server is not ready to handle the request.'
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/chorusCredentials'
      tags:
        - AuthenticationService
      security: []
  /api/rest/v1/authentication/logout:
    post:
      summary: Logout
      description: This endpoint logs out a user
      operationId: AuthenticationService_Logout
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/chorusLogoutReply'
        "400":
          description: 'Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing)'
          schema: {}
        "401":
          description: 'Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource'
          schema: {}
        "403":
          description: 'Forbidden: indicates that the server understands the request but refuses to authorize it'
          schema: {}
        "404":
          description: 'Not Found: indicates that the server cannot find the requested resource'
          schema: {}
        "500":
          description: 'Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request'
          schema: {}
        "503":
          description: 'Service Unavailable: indicates that the server is not ready to handle the request.'
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/chorusLogoutRequest'
      tags:
        - AuthenticationService
  /api/rest/v1/authentication/modes:
    get:
      summary: Get list of possible way to authenticate
      description: This endpoint list all the way the backend accept authentication
      operationId: AuthenticationService_GetAuthenticationModes
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/chorusGetAuthenticationModesReply'
        "400":
          description: 'Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing)'
          schema: {}
        "401":
          description: 'Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource'
          schema: {}
        "403":
          description: 'Forbidden: indicates that the server understands the request but refuses to authorize it'
          schema: {}
        "404":
          description: 'Not Found: indicates that the server cannot find the requested resource'
          schema: {}
        "500":
          description: 'Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request'
          schema: {}
        "503":
          description: 'Service Unavailable: indicates that the server is not ready to handle the request.'
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      tags:
        - AuthenticationService
      security: []
  /api/rest/v1/authentication/oauth2/{id}/login:
    get:
      summary: Authenticate using Auth 2.0
      description: This endpoint redirects a user to a configured oauth2 provider
      operationId: AuthenticationService_AuthenticateOauth
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/chorusAuthenticateOauthReply'
        "400":
          description: 'Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing)'
          schema: {}
        "401":
          description: 'Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource'
          schema: {}
        "403":
          description: 'Forbidden: indicates that the server understands the request but refuses to authorize it'
          schema: {}
        "404":
          description: 'Not Found: indicates that the server cannot find the requested resource'
          schema: {}
        "500":
          description: 'Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request'
          schema: {}
        "503":
          description: 'Service Unavailable: indicates that the server is not ready to handle the request.'
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: id
          in: path
          required: true
          type: string
      tags:
        - AuthenticationService
      security: []
  /api/rest/v1/authentication/oauth2/{id}/redirect:
    get:
      summary: Authenticate redirect using Auth 2.0
      description: This endpoint is called by the provider after auth for the backend to retrieve the user profile
      operationId: AuthenticationService_AuthenticateOauthRedirect
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/chorusAuthenticateOauthRedirectReply'
        "400":
          description: 'Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing)'
          schema: {}
        "401":
          description: 'Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource'
          schema: {}
        "403":
          description: 'Forbidden: indicates that the server understands the request but refuses to authorize it'
          schema: {}
        "404":
          description: 'Not Found: indicates that the server cannot find the requested resource'
          schema: {}
        "500":
          description: 'Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request'
          schema: {}
        "503":
          description: 'Service Unavailable: indicates that the server is not ready to handle the request.'
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - name: state
          in: query
          required: false
          type: string
        - name: sessionState
          in: query
          required: false
          type: string
        - name: code
          in: query
          required: false
          type: string
      tags:
        - AuthenticationService
      security: []
    post:
      summary: Authenticate redirect using Auth 2.0
      description: This endpoint is called by the provider after auth for the backend to retrieve the user profile
      operationId: AuthenticationService_AuthenticateOauthRedirect2
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/chorusAuthenticateOauthRedirectReply'
        "400":
          description: 'Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing)'
          schema: {}
        "401":
          description: 'Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource'
          schema: {}
        "403":
          description: 'Forbidden: indicates that the server understands the request but refuses to authorize it'
          schema: {}
        "404":
          description: 'Not Found: indicates that the server cannot find the requested resource'
          schema: {}
        "500":
          description: 'Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request'
          schema: {}
        "503":
          description: 'Service Unavailable: indicates that the server is not ready to handle the request.'
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/AuthenticationServiceAuthenticateOauthRedirectBody'
      tags:
        - AuthenticationService
      security: []
  /api/rest/v1/authentication/refresh-token:
    post:
      summary: Refresh token
      description: This endpoint refreshes a user token
      operationId: AuthenticationService_RefreshToken
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/chorusAuthenticationReply'
        "400":
          description: 'Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing)'
          schema: {}
        "401":
          description: 'Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource'
          schema: {}
        "403":
          description: 'Forbidden: indicates that the server understands the request but refuses to authorize it'
          schema: {}
        "404":
          description: 'Not Found: indicates that the server cannot find the requested resource'
          schema: {}
        "500":
          description: 'Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request'
          schema: {}
        "503":
          description: 'Service Unavailable: indicates that the server is not ready to handle the request.'
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/chorusRefreshTokenRequest'
      tags:
        - AuthenticationService
  /api/rest/v1/health:
    get:
      summary: Get health check
      description: This endpoint returns health check
      operationId: HealthService_GetHealthCheck
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/chorusGetHealthCheckReply'
        "400":
          description: 'Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing)'
          schema: {}
        "401":
          description: 'Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource'
          schema: {}
        "403":
          description: 'Forbidden: indicates that the server understands the request but refuses to authorize it'
          schema: {}
        "404":
          description: 'Not Found: indicates that the server cannot find the requested resource'
          schema: {}
        "500":
          description: 'Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request'
          schema: {}
        "503":
          description: 'Service Unavailable: indicates that the server is not ready to handle the request.'
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      tags:
        - HealthService
      security: []
    head:
      summary: Get health check
      description: This endpoint returns health check
      operationId: HealthService_GetHealthCheck2
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/chorusGetHealthCheckReply'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      tags:
        - HealthService
      security: []
  /api/rest/v1/notifications:
    get:
      summary: List notifications
      description: This endpoint returns a list of notifications
      operationId: NotificationService_GetNotifications
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/chorusGetNotificationsReply'
        "400":
          description: 'Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing)'
          schema: {}
        "401":
          description: 'Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource'
          schema: {}
        "403":
          description: 'Forbidden: indicates that the server understands the request but refuses to authorize it'
          schema: {}
        "404":
          description: 'Not Found: indicates that the server cannot find the requested resource'
          schema: {}
        "500":
          description: 'Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request'
          schema: {}
        "503":
          description: 'Service Unavailable: indicates that the server is not ready to handle the request.'
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: pagination.offset
          description: Optionally offset the number of results
          in: query
          required: false
          type: integer
          format: int64
        - name: pagination.limit
          description: Optionally limit the number of results (between 1 and 500)
          in: query
          required: false
          type: integer
          format: int64
        - name: pagination.sort.order
          in: query
          required: false
          type: string
        - name: pagination.sort.type
          in: query
          required: false
          type: string
        - name: pagination.query
          description: Optionally filter the results
          in: query
          required: false
          type: array
          items:
            type: string
          collectionFormat: multi
          x-example:
            - user_id=9999
            - status=STATUS_CREATED,STATUS_CLOSED
        - name: isRead
          in: query
          required: false
          type: boolean
      tags:
        - NotificationService
  /api/rest/v1/notifications/count:
    get:
      summary: Count unread notifications
      description: This endpoint returns the amount of unread notifications
      operationId: NotificationService_CountUnreadNotifications
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/chorusCountUnreadNotificationsReply'
        "400":
          description: 'Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing)'
          schema: {}
        "401":
          description: 'Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource'
          schema: {}
        "403":
          description: 'Forbidden: indicates that the server understands the request but refuses to authorize it'
          schema: {}
        "404":
          description: 'Not Found: indicates that the server cannot find the requested resource'
          schema: {}
        "500":
          description: 'Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request'
          schema: {}
        "503":
          description: 'Service Unavailable: indicates that the server is not ready to handle the request.'
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      tags:
        - NotificationService
  /api/rest/v1/notifications/read:
    post:
      summary: Mark a notification as read
      description: This endpoint marks a notification as read
      operationId: NotificationService_MarkNotificationsAsRead
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        "400":
          description: 'Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing)'
          schema: {}
        "401":
          description: 'Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource'
          schema: {}
        "403":
          description: 'Forbidden: indicates that the server understands the request but refuses to authorize it'
          schema: {}
        "404":
          description: 'Not Found: indicates that the server cannot find the requested resource'
          schema: {}
        "500":
          description: 'Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request'
          schema: {}
        "503":
          description: 'Service Unavailable: indicates that the server is not ready to handle the request.'
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/chorusMarkNotificationsAsReadRequest'
      tags:
        - NotificationService
  /api/rest/v1/steward/tenants/initialize:
    post:
      summary: Initialize a tenant
      description: This endpoint initializes a new tenant
      operationId: StewardService_InitializeTenant
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        "400":
          description: 'Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing)'
          schema: {}
        "401":
          description: 'Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource'
          schema: {}
        "403":
          description: 'Forbidden: indicates that the server understands the request but refuses to authorize it'
          schema: {}
        "404":
          description: 'Not Found: indicates that the server cannot find the requested resource'
          schema: {}
        "500":
          description: 'Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request'
          schema: {}
        "503":
          description: 'Service Unavailable: indicates that the server is not ready to handle the request.'
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/chorusInitializeTenantRequest'
      tags:
        - StewardService
  /api/rest/v1/users:
    get:
      summary: List users
      description: This endpoint returns a list of users
      operationId: UserService_GetUsers
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/chorusGetUsersReply'
        "400":
          description: 'Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing)'
          schema: {}
        "401":
          description: 'Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource'
          schema: {}
        "403":
          description: 'Forbidden: indicates that the server understands the request but refuses to authorize it'
          schema: {}
        "404":
          description: 'Not Found: indicates that the server cannot find the requested resource'
          schema: {}
        "500":
          description: 'Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request'
          schema: {}
        "503":
          description: 'Service Unavailable: indicates that the server is not ready to handle the request.'
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      tags:
        - UserService
    post:
      summary: Create a user
      description: This endpoint creates a user
      operationId: UserService_CreateUser
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/chorusCreateUserReply'
        "400":
          description: 'Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing)'
          schema: {}
        "401":
          description: 'Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource'
          schema: {}
        "403":
          description: 'Forbidden: indicates that the server understands the request but refuses to authorize it'
          schema: {}
        "404":
          description: 'Not Found: indicates that the server cannot find the requested resource'
          schema: {}
        "500":
          description: 'Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request'
          schema: {}
        "503":
          description: 'Service Unavailable: indicates that the server is not ready to handle the request.'
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/chorusUser'
      tags:
        - UserService
      security: []
    put:
      summary: Update a user
      description: This endpoint updates a user
      operationId: UserService_UpdateUser
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/chorusUpdateUserReply'
        "400":
          description: 'Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing)'
          schema: {}
        "401":
          description: 'Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource'
          schema: {}
        "403":
          description: 'Forbidden: indicates that the server understands the request but refuses to authorize it'
          schema: {}
        "404":
          description: 'Not Found: indicates that the server cannot find the requested resource'
          schema: {}
        "500":
          description: 'Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request'
          schema: {}
        "503":
          description: 'Service Unavailable: indicates that the server is not ready to handle the request.'
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/chorusUpdateUserRequest'
      tags:
        - UserService
  /api/rest/v1/users/me:
    get:
      summary: Get my own user
      description: This endpoint returns the details of the authenticated user
      operationId: UserService_GetUserMe
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/chorusGetUserMeReply'
        "400":
          description: 'Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing)'
          schema: {}
        "401":
          description: 'Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource'
          schema: {}
        "403":
          description: 'Forbidden: indicates that the server understands the request but refuses to authorize it'
          schema: {}
        "404":
          description: 'Not Found: indicates that the server cannot find the requested resource'
          schema: {}
        "500":
          description: 'Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request'
          schema: {}
        "503":
          description: 'Service Unavailable: indicates that the server is not ready to handle the request.'
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      tags:
        - UserService
  /api/rest/v1/users/me/password:
    put:
      summary: Update password
      description: This endpoint updates the password of the authenticated user
      operationId: UserService_UpdatePassword
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/chorusUpdatePasswordReply'
        "400":
          description: 'Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing)'
          schema: {}
        "401":
          description: 'Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource'
          schema: {}
        "403":
          description: 'Forbidden: indicates that the server understands the request but refuses to authorize it'
          schema: {}
        "404":
          description: 'Not Found: indicates that the server cannot find the requested resource'
          schema: {}
        "500":
          description: 'Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request'
          schema: {}
        "503":
          description: 'Service Unavailable: indicates that the server is not ready to handle the request.'
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/chorusUpdatePasswordRequest'
      tags:
        - UserService
  /api/rest/v1/users/me/totp/enable:
    post:
      summary: Enable TOTP
      description: This endpoint enables the TOTP of the authenticated user
      operationId: UserService_EnableTotp
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/chorusEnableTotpReply'
        "400":
          description: 'Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing)'
          schema: {}
        "401":
          description: 'Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource'
          schema: {}
        "403":
          description: 'Forbidden: indicates that the server understands the request but refuses to authorize it'
          schema: {}
        "404":
          description: 'Not Found: indicates that the server cannot find the requested resource'
          schema: {}
        "500":
          description: 'Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request'
          schema: {}
        "503":
          description: 'Service Unavailable: indicates that the server is not ready to handle the request.'
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/chorusEnableTotpRequest'
      tags:
        - UserService
  /api/rest/v1/users/me/totp/reset:
    post:
      summary: Reset TOTP
      description: This endpoint resets the TOTP of the authenticated user
      operationId: UserService_ResetTotp
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/chorusResetTotpReply'
        "400":
          description: 'Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing)'
          schema: {}
        "401":
          description: 'Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource'
          schema: {}
        "403":
          description: 'Forbidden: indicates that the server understands the request but refuses to authorize it'
          schema: {}
        "404":
          description: 'Not Found: indicates that the server cannot find the requested resource'
          schema: {}
        "500":
          description: 'Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request'
          schema: {}
        "503":
          description: 'Service Unavailable: indicates that the server is not ready to handle the request.'
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/chorusResetTotpRequest'
      tags:
        - UserService
  /api/rest/v1/users/{id}:
    get:
      summary: Get a user
      description: This endpoint returns a user
      operationId: UserService_GetUser
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/chorusGetUserReply'
        "400":
          description: 'Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing)'
          schema: {}
        "401":
          description: 'Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource'
          schema: {}
        "403":
          description: 'Forbidden: indicates that the server understands the request but refuses to authorize it'
          schema: {}
        "404":
          description: 'Not Found: indicates that the server cannot find the requested resource'
          schema: {}
        "500":
          description: 'Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request'
          schema: {}
        "503":
          description: 'Service Unavailable: indicates that the server is not ready to handle the request.'
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: id
          in: path
          required: true
          type: string
          format: uint64
      tags:
        - UserService
    delete:
      summary: Delete a user
      description: This endpoint deletes a user
      operationId: UserService_DeleteUser
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/chorusDeleteUserReply'
        "400":
          description: 'Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing)'
          schema: {}
        "401":
          description: 'Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource'
          schema: {}
        "403":
          description: 'Forbidden: indicates that the server understands the request but refuses to authorize it'
          schema: {}
        "404":
          description: 'Not Found: indicates that the server cannot find the requested resource'
          schema: {}
        "500":
          description: 'Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request'
          schema: {}
        "503":
          description: 'Service Unavailable: indicates that the server is not ready to handle the request.'
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: id
          in: path
          required: true
          type: string
          format: uint64
      tags:
        - UserService
  /api/rest/v1/users/{id}/password/reset:
    post:
      summary: Reset password
      description: This endpoint resets a user's password
      operationId: UserService_ResetPassword
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/chorusResetPasswordReply'
        "400":
          description: 'Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing)'
          schema: {}
        "401":
          description: 'Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource'
          schema: {}
        "403":
          description: 'Forbidden: indicates that the server understands the request but refuses to authorize it'
          schema: {}
        "404":
          description: 'Not Found: indicates that the server cannot find the requested resource'
          schema: {}
        "500":
          description: 'Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request'
          schema: {}
        "503":
          description: 'Service Unavailable: indicates that the server is not ready to handle the request.'
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: id
          in: path
          required: true
          type: string
          format: uint64
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/UserServiceResetPasswordBody'
      tags:
        - UserService
  /api/rest/v1/workbenchs:
    get:
      summary: List workbenchs
      description: This endpoint returns a list of workbenchs
      operationId: WorkbenchService_ListWorkbenchs
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/chorusListWorkbenchsReply'
        "400":
          description: 'Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing)'
          schema: {}
        "401":
          description: 'Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource'
          schema: {}
        "403":
          description: 'Forbidden: indicates that the server understands the request but refuses to authorize it'
          schema: {}
        "404":
          description: 'Not Found: indicates that the server cannot find the requested resource'
          schema: {}
        "500":
          description: 'Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request'
          schema: {}
        "503":
          description: 'Service Unavailable: indicates that the server is not ready to handle the request.'
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: pagination.offset
          description: Optionally offset the number of results
          in: query
          required: false
          type: integer
          format: int64
        - name: pagination.limit
          description: Optionally limit the number of results (between 1 and 500)
          in: query
          required: false
          type: integer
          format: int64
        - name: pagination.sort.order
          in: query
          required: false
          type: string
        - name: pagination.sort.type
          in: query
          required: false
          type: string
        - name: pagination.query
          description: Optionally filter the results
          in: query
          required: false
          type: array
          items:
            type: string
          collectionFormat: multi
          x-example:
            - user_id=9999
            - status=STATUS_CREATED,STATUS_CLOSED
      tags:
        - WorkbenchService
    post:
      summary: Create a workbench
      description: This endpoint creates a workbench
      operationId: WorkbenchService_CreateWorkbench
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/chorusCreateWorkbenchReply'
        "400":
          description: 'Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing)'
          schema: {}
        "401":
          description: 'Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource'
          schema: {}
        "403":
          description: 'Forbidden: indicates that the server understands the request but refuses to authorize it'
          schema: {}
        "404":
          description: 'Not Found: indicates that the server cannot find the requested resource'
          schema: {}
        "500":
          description: 'Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request'
          schema: {}
        "503":
          description: 'Service Unavailable: indicates that the server is not ready to handle the request.'
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/chorusWorkbench'
      tags:
        - WorkbenchService
    put:
      summary: Update a workbench
      description: This endpoint updates a workbench
      operationId: WorkbenchService_UpdateWorkbench
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/chorusUpdateWorkbenchReply'
        "400":
          description: 'Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing)'
          schema: {}
        "401":
          description: 'Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource'
          schema: {}
        "403":
          description: 'Forbidden: indicates that the server understands the request but refuses to authorize it'
          schema: {}
        "404":
          description: 'Not Found: indicates that the server cannot find the requested resource'
          schema: {}
        "500":
          description: 'Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request'
          schema: {}
        "503":
          description: 'Service Unavailable: indicates that the server is not ready to handle the request.'
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/chorusUpdateWorkbenchRequest'
      tags:
        - WorkbenchService
  /api/rest/v1/workbenchs/{id}:
    get:
      summary: Get a workbench
      description: This endpoint returns a workbench
      operationId: WorkbenchService_GetWorkbench
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/chorusGetWorkbenchReply'
        "400":
          description: 'Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing)'
          schema: {}
        "401":
          description: 'Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource'
          schema: {}
        "403":
          description: 'Forbidden: indicates that the server understands the request but refuses to authorize it'
          schema: {}
        "404":
          description: 'Not Found: indicates that the server cannot find the requested resource'
          schema: {}
        "500":
          description: 'Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request'
          schema: {}
        "503":
          description: 'Service Unavailable: indicates that the server is not ready to handle the request.'
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: id
          in: path
          required: true
          type: string
          format: uint64
      tags:
        - WorkbenchService
    delete:
      summary: Delete a workbench
      description: This endpoint deletes a workbench
      operationId: WorkbenchService_DeleteWorkbench
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/chorusDeleteWorkbenchReply'
        "400":
          description: 'Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing)'
          schema: {}
        "401":
          description: 'Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource'
          schema: {}
        "403":
          description: 'Forbidden: indicates that the server understands the request but refuses to authorize it'
          schema: {}
        "404":
          description: 'Not Found: indicates that the server cannot find the requested resource'
          schema: {}
        "500":
          description: 'Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request'
          schema: {}
        "503":
          description: 'Service Unavailable: indicates that the server is not ready to handle the request.'
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: id
          in: path
          required: true
          type: string
          format: uint64
      tags:
        - WorkbenchService
  /api/rest/v1/workspaces:
    get:
      summary: List workspaces
      description: This endpoint returns a list of workspaces
      operationId: WorkspaceService_ListWorkspaces
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/chorusListWorkspacesReply'
        "400":
          description: 'Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing)'
          schema: {}
        "401":
          description: 'Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource'
          schema: {}
        "403":
          description: 'Forbidden: indicates that the server understands the request but refuses to authorize it'
          schema: {}
        "404":
          description: 'Not Found: indicates that the server cannot find the requested resource'
          schema: {}
        "500":
          description: 'Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request'
          schema: {}
        "503":
          description: 'Service Unavailable: indicates that the server is not ready to handle the request.'
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: pagination.offset
          description: Optionally offset the number of results
          in: query
          required: false
          type: integer
          format: int64
        - name: pagination.limit
          description: Optionally limit the number of results (between 1 and 500)
          in: query
          required: false
          type: integer
          format: int64
        - name: pagination.sort.order
          in: query
          required: false
          type: string
        - name: pagination.sort.type
          in: query
          required: false
          type: string
        - name: pagination.query
          description: Optionally filter the results
          in: query
          required: false
          type: array
          items:
            type: string
          collectionFormat: multi
          x-example:
            - user_id=9999
            - status=STATUS_CREATED,STATUS_CLOSED
      tags:
        - WorkspaceService
    post:
      summary: Create a workspace
      description: This endpoint creates a workspace
      operationId: WorkspaceService_CreateWorkspace
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/chorusCreateWorkspaceReply'
        "400":
          description: 'Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing)'
          schema: {}
        "401":
          description: 'Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource'
          schema: {}
        "403":
          description: 'Forbidden: indicates that the server understands the request but refuses to authorize it'
          schema: {}
        "404":
          description: 'Not Found: indicates that the server cannot find the requested resource'
          schema: {}
        "500":
          description: 'Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request'
          schema: {}
        "503":
          description: 'Service Unavailable: indicates that the server is not ready to handle the request.'
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/chorusWorkspace'
      tags:
        - WorkspaceService
    put:
      summary: Update a workspace
      description: This endpoint updates a workspace
      operationId: WorkspaceService_UpdateWorkspace
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/chorusUpdateWorkspaceReply'
        "400":
          description: 'Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing)'
          schema: {}
        "401":
          description: 'Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource'
          schema: {}
        "403":
          description: 'Forbidden: indicates that the server understands the request but refuses to authorize it'
          schema: {}
        "404":
          description: 'Not Found: indicates that the server cannot find the requested resource'
          schema: {}
        "500":
          description: 'Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request'
          schema: {}
        "503":
          description: 'Service Unavailable: indicates that the server is not ready to handle the request.'
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/chorusUpdateWorkspaceRequest'
      tags:
        - WorkspaceService
  /api/rest/v1/workspaces/{id}:
    get:
      summary: Get a workspace
      description: This endpoint returns a workspace
      operationId: WorkspaceService_GetWorkspace
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/chorusGetWorkspaceReply'
        "400":
          description: 'Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing)'
          schema: {}
        "401":
          description: 'Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource'
          schema: {}
        "403":
          description: 'Forbidden: indicates that the server understands the request but refuses to authorize it'
          schema: {}
        "404":
          description: 'Not Found: indicates that the server cannot find the requested resource'
          schema: {}
        "500":
          description: 'Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request'
          schema: {}
        "503":
          description: 'Service Unavailable: indicates that the server is not ready to handle the request.'
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: id
          in: path
          required: true
          type: string
          format: uint64
      tags:
        - WorkspaceService
    delete:
      summary: Delete a workspace
      description: This endpoint deletes a workspace
      operationId: WorkspaceService_DeleteWorkspace
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/chorusDeleteWorkspaceReply'
        "400":
          description: 'Bad Request: indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing)'
          schema: {}
        "401":
          description: 'Unauthorized: indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource'
          schema: {}
        "403":
          description: 'Forbidden: indicates that the server understands the request but refuses to authorize it'
          schema: {}
        "404":
          description: 'Not Found: indicates that the server cannot find the requested resource'
          schema: {}
        "500":
          description: 'Internal Server Error: indicates that the server encountered an unexpected condition that prevented it from fulfilling the request'
          schema: {}
        "503":
          description: 'Service Unavailable: indicates that the server is not ready to handle the request.'
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: id
          in: path
          required: true
          type: string
          format: uint64
      tags:
        - WorkspaceService
definitions:
  AuthenticationServiceAuthenticateOauthRedirectBody:
    type: object
    properties:
      state:
        type: string
      sessionState:
        type: string
      code:
        type: string
  UserServiceResetPasswordBody:
    type: object
  chorusApp:
    type: object
    properties:
      id:
        type: string
        format: uint64
      tenantId:
        type: string
        format: uint64
      userId:
        type: string
        format: uint64
      name:
        type: string
      description:
        type: string
      status:
        type: string
      dockerImageRegistry:
        type: string
      dockerImageName:
        type: string
      dockerImageTag:
        type: string
      shmSize:
        type: string
      kioskConfigURL:
        type: string
      maxCPU:
        type: string
      minCPU:
        type: string
      maxMemory:
        type: string
      minMemory:
        type: string
      iconURL:
        type: string
      createdAt:
        type: string
        format: date-time
      updatedAt:
        type: string
        format: date-time
      prettyName:
        type: string
  chorusAppInstance:
    type: object
    properties:
      id:
        type: string
        format: uint64
      tenantId:
        type: string
        format: uint64
      userId:
        type: string
        format: uint64
      appId:
        type: string
        format: uint64
      workspaceId:
        type: string
        format: uint64
      workbenchId:
        type: string
        format: uint64
      status:
        type: string
      initialResolutionWidth:
        type: integer
        format: int64
      initialResolutionHeight:
        type: integer
        format: int64
      createdAt:
        type: string
        format: date-time
      updatedAt:
        type: string
        format: date-time
  chorusAuthenticateOauthRedirectReply:
    type: object
    properties:
      result:
        $ref: '#/definitions/chorusAuthenticateOauthRedirectResult'
  chorusAuthenticateOauthRedirectResult:
    type: object
    properties:
      token:
        type: string
  chorusAuthenticateOauthReply:
    type: object
    properties:
      result:
        $ref: '#/definitions/chorusAuthenticateOauthResult'
  chorusAuthenticateOauthResult:
    type: object
    properties:
      redirectURI:
        type: string
  chorusAuthenticationMode:
    type: object
    properties:
      type:
        type: string
      internal:
        $ref: '#/definitions/chorusInternal'
      openid:
        $ref: '#/definitions/chorusOpenID'
      ButtonText:
        type: string
      IconURL:
        type: string
  chorusAuthenticationReply:
    type: object
    properties:
      result:
        $ref: '#/definitions/chorusAuthenticationResult'
  chorusAuthenticationResult:
    type: object
    properties:
      token:
        type: string
  chorusCountUnreadNotificationsReply:
    type: object
    properties:
      result:
        type: integer
        format: int64
  chorusCreateAppInstanceReply:
    type: object
    properties:
      result:
        $ref: '#/definitions/chorusCreateAppInstanceResult'
  chorusCreateAppInstanceResult:
    type: object
    properties:
      id:
        type: string
        format: uint64
  chorusCreateAppReply:
    type: object
    properties:
      result:
        $ref: '#/definitions/chorusCreateAppResult'
  chorusCreateAppResult:
    type: object
    properties:
      id:
        type: string
        format: uint64
  chorusCreateUserReply:
    type: object
    properties:
      result:
        $ref: '#/definitions/chorusCreateUserResult'
    title: Create Users
  chorusCreateUserResult:
    type: object
    properties:
      id:
        type: string
        format: uint64
  chorusCreateWorkbenchReply:
    type: object
    properties:
      result:
        $ref: '#/definitions/chorusCreateWorkbenchResult'
  chorusCreateWorkbenchResult:
    type: object
    properties:
      id:
        type: string
        format: uint64
  chorusCreateWorkspaceReply:
    type: object
    properties:
      result:
        $ref: '#/definitions/chorusCreateWorkspaceResult'
  chorusCreateWorkspaceResult:
    type: object
    properties:
      id:
        type: string
        format: uint64
  chorusCredentials:
    type: object
    properties:
      username:
        type: string
      password:
        type: string
      totp:
        type: string
  chorusDeleteAppInstanceReply:
    type: object
    properties:
      result:
        $ref: '#/definitions/chorusDeleteAppInstanceResult'
  chorusDeleteAppInstanceResult:
    type: object
  chorusDeleteAppReply:
    type: object
    properties:
      result:
        $ref: '#/definitions/chorusDeleteAppResult'
  chorusDeleteAppResult:
    type: object
  chorusDeleteUserReply:
    type: object
    properties:
      result:
        $ref: '#/definitions/chorusDeleteUserResult'
  chorusDeleteUserResult:
    type: object
  chorusDeleteWorkbenchReply:
    type: object
    properties:
      result:
        $ref: '#/definitions/chorusDeleteWorkbenchResult'
  chorusDeleteWorkbenchResult:
    type: object
  chorusDeleteWorkspaceReply:
    type: object
    properties:
      result:
        $ref: '#/definitions/chorusDeleteWorkspaceResult'
  chorusDeleteWorkspaceResult:
    type: object
  chorusEnableTotpReply:
    type: object
    properties:
      result:
        $ref: '#/definitions/chorusEnableTotpResult'
  chorusEnableTotpRequest:
    type: object
    properties:
      totp:
        type: string
    title: Enable TOTP
  chorusEnableTotpResult:
    type: object
  chorusGetAppInstanceReply:
    type: object
    properties:
      result:
        $ref: '#/definitions/chorusGetAppInstanceResult'
  chorusGetAppInstanceResult:
    type: object
    properties:
      appInstance:
        $ref: '#/definitions/chorusAppInstance'
  chorusGetAppReply:
    type: object
    properties:
      result:
        $ref: '#/definitions/chorusGetAppResult'
  chorusGetAppResult:
    type: object
    properties:
      app:
        $ref: '#/definitions/chorusApp'
  chorusGetAuthenticationModesReply:
    type: object
    properties:
      result:
        type: array
        items:
          type: object
          $ref: '#/definitions/chorusAuthenticationMode'
  chorusGetHealthCheckReply:
    type: object
  chorusGetNotificationsReply:
    type: object
    properties:
      result:
        type: array
        items:
          type: object
          $ref: '#/definitions/chorusNotification'
      totalItems:
        type: integer
        format: int64
  chorusGetUserMeReply:
    type: object
    properties:
      result:
        $ref: '#/definitions/chorusGetUserMeResult'
  chorusGetUserMeResult:
    type: object
    properties:
      me:
        $ref: '#/definitions/chorusUser'
    title: Get User (me)
  chorusGetUserReply:
    type: object
    properties:
      result:
        $ref: '#/definitions/chorusGetUserResult'
  chorusGetUserResult:
    type: object
    properties:
      user:
        $ref: '#/definitions/chorusUser'
  chorusGetUsersReply:
    type: object
    properties:
      result:
        type: array
        items:
          type: object
          $ref: '#/definitions/chorusUser'
  chorusGetWorkbenchReply:
    type: object
    properties:
      result:
        $ref: '#/definitions/chorusGetWorkbenchResult'
  chorusGetWorkbenchResult:
    type: object
    properties:
      workbench:
        $ref: '#/definitions/chorusWorkbench'
  chorusGetWorkspaceReply:
    type: object
    properties:
      result:
        $ref: '#/definitions/chorusGetWorkspaceResult'
  chorusGetWorkspaceResult:
    type: object
    properties:
      workspace:
        $ref: '#/definitions/chorusWorkspace'
  chorusInitializeTenantRequest:
    type: object
    properties:
      tenantId:
        type: string
        format: uint64
  chorusInternal:
    type: object
    properties:
      publicRegistrationEnabled:
        type: boolean
  chorusListAppInstancesReply:
    type: object
    properties:
      result:
        type: array
        items:
          type: object
          $ref: '#/definitions/chorusAppInstance'
  chorusListAppsReply:
    type: object
    properties:
      result:
        type: array
        items:
          type: object
          $ref: '#/definitions/chorusApp'
  chorusListWorkbenchsReply:
    type: object
    properties:
      result:
        type: array
        items:
          type: object
          $ref: '#/definitions/chorusWorkbench'
  chorusListWorkspacesReply:
    type: object
    properties:
      result:
        type: array
        items:
          type: object
          $ref: '#/definitions/chorusWorkspace'
  chorusLogoutReply:
    type: object
    properties:
      redirectURL:
        type: string
  chorusLogoutRequest:
    type: object
  chorusMarkNotificationsAsReadRequest:
    type: object
    properties:
      notificationIds:
        type: array
        items:
          type: string
      markAll:
        type: boolean
  chorusNotification:
    type: object
    properties:
      id:
        type: string
      tenantId:
        type: string
        format: uint64
      message:
        type: string
      createdAt:
        type: string
        format: date-time
      readAt:
        type: string
        format: date-time
  chorusOpenID:
    type: object
    properties:
      id:
        type: string
  chorusPaginationQuery:
    type: object
    properties:
      offset:
        type: integer
        format: int64
        description: Optionally offset the number of results
      limit:
        type: integer
        format: int64
        description: Optionally limit the number of results (between 1 and 500)
      sort:
        $ref: '#/definitions/chorusSort'
        description: Optionally sort the results
      query:
        type: array
        items:
          type: string
        description: Optionally filter the results
        x-example:
          - user_id=9999
          - status=STATUS_CREATED,STATUS_CLOSED
  chorusRefreshTokenRequest:
    type: object
  chorusResetPasswordReply:
    type: object
    properties:
      result:
        $ref: '#/definitions/chorusResetPasswordResult'
  chorusResetPasswordResult:
    type: object
  chorusResetTotpReply:
    type: object
    properties:
      result:
        $ref: '#/definitions/chorusResetTotpResult'
  chorusResetTotpRequest:
    type: object
    properties:
      password:
        type: string
    title: Reset TOTP
  chorusResetTotpResult:
    type: object
    properties:
      totpSecret:
        type: string
      totpRecoveryCodes:
        type: array
        items:
          type: string
  chorusSort:
    type: object
    properties:
      order:
        type: string
      type:
        type: string
  chorusUpdateAppInstanceReply:
    type: object
    properties:
      result:
        $ref: '#/definitions/chorusUpdateAppInstanceResult'
  chorusUpdateAppInstanceRequest:
    type: object
    properties:
      appInstance:
        $ref: '#/definitions/chorusAppInstance'
  chorusUpdateAppInstanceResult:
    type: object
  chorusUpdateAppReply:
    type: object
    properties:
      result:
        $ref: '#/definitions/chorusUpdateAppResult'
  chorusUpdateAppRequest:
    type: object
    properties:
      app:
        $ref: '#/definitions/chorusApp'
  chorusUpdateAppResult:
    type: object
  chorusUpdatePasswordReply:
    type: object
    properties:
      result:
        $ref: '#/definitions/chorusUpdateUserResult'
  chorusUpdatePasswordRequest:
    type: object
    properties:
      currentPassword:
        type: string
      newPassword:
        type: string
    title: Update User Password
  chorusUpdateUserReply:
    type: object
    properties:
      result:
        $ref: '#/definitions/chorusUpdateUserResult'
  chorusUpdateUserRequest:
    type: object
    properties:
      user:
        $ref: '#/definitions/chorusUser'
    title: Update User
  chorusUpdateUserResult:
    type: object
  chorusUpdateWorkbenchReply:
    type: object
    properties:
      result:
        $ref: '#/definitions/chorusUpdateWorkbenchResult'
  chorusUpdateWorkbenchRequest:
    type: object
    properties:
      workbench:
        $ref: '#/definitions/chorusWorkbench'
  chorusUpdateWorkbenchResult:
    type: object
  chorusUpdateWorkspaceReply:
    type: object
    properties:
      result:
        $ref: '#/definitions/chorusUpdateWorkspaceResult'
  chorusUpdateWorkspaceRequest:
    type: object
    properties:
      workspace:
        $ref: '#/definitions/chorusWorkspace'
  chorusUpdateWorkspaceResult:
    type: object
  chorusUser:
    type: object
    properties:
      id:
        type: string
        format: uint64
      firstName:
        type: string
      lastName:
        type: string
      username:
        type: string
      source:
        type: string
      password:
        type: string
      status:
        type: string
      roles:
        type: array
        items:
          type: string
      totpEnabled:
        type: boolean
      createdAt:
        type: string
        format: date-time
      updatedAt:
        type: string
        format: date-time
      passwordChanged:
        type: boolean
  chorusWorkbench:
    type: object
    properties:
      id:
        type: string
        format: uint64
      tenantId:
        type: string
        format: uint64
      userId:
        type: string
        format: uint64
      workspaceId:
        type: string
        format: uint64
      name:
        type: string
      shortName:
        type: string
      description:
        type: string
      status:
        type: string
      initialResolutionWidth:
        type: integer
        format: int64
      initialResolutionHeight:
        type: integer
        format: int64
      appInsanceIds:
        type: array
        items:
          type: string
          format: uint64
      appInstances:
        type: array
        items:
          type: string
          format: uint64
      createdAt:
        type: string
        format: date-time
      updatedAt:
        type: string
        format: date-time
  chorusWorkspace:
    type: object
    properties:
      id:
        type: string
        format: uint64
      tenantId:
        type: string
        format: uint64
      userId:
        type: string
        format: uint64
      name:
        type: string
      shortName:
        type: string
      description:
        type: string
      status:
        type: string
      appInsanceIds:
        type: array
        items:
          type: string
          format: uint64
      appInstances:
        type: array
        items:
          type: string
          format: uint64
      createdAt:
        type: string
        format: date-time
      updatedAt:
        type: string
        format: date-time
  protobufAny:
    type: object
    properties:
      '@type':
        type: string
    additionalProperties: {}
  rpcStatus:
    type: object
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
      details:
        type: array
        items:
          type: object
          $ref: '#/definitions/protobufAny'
securityDefinitions:
  bearer:
    type: apiKey
    description: 'Authentication token: Bearer <token>'
    name: Authorization
    in: header
security:
  - bearer: []