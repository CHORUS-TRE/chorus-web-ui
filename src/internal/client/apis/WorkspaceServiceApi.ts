/* tslint:disable */
/* eslint-disable */
/**
 * CHORUS backend API
 * CHORUS backend API documentation
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type {
  ChorusCreateWorkspaceReply,
  ChorusDeleteWorkspaceReply,
  ChorusGetWorkspaceReply,
  ChorusListWorkspacesReply,
  ChorusUpdateWorkspaceReply,
  ChorusUpdateWorkspaceRequest,
  ChorusWorkspace
} from '../models/index'
import {
  ChorusCreateWorkspaceReplyFromJSON,
  ChorusDeleteWorkspaceReplyFromJSON,
  ChorusGetWorkspaceReplyFromJSON,
  ChorusListWorkspacesReplyFromJSON,
  ChorusUpdateWorkspaceReplyFromJSON,
  ChorusUpdateWorkspaceRequestToJSON,
  ChorusWorkspaceToJSON
} from '../models/index'
import * as runtime from '../runtime'

export interface WorkspaceServiceCreateWorkspaceRequest {
  body: ChorusWorkspace
}

export interface WorkspaceServiceDeleteWorkspaceRequest {
  id: string
}

export interface WorkspaceServiceGetWorkspaceRequest {
  id: string
}

export interface WorkspaceServiceListWorkspacesRequest {
  paginationOffset?: number
  paginationLimit?: number
  paginationSortOrder?: string
  paginationSortType?: string
  paginationQuery?: Array<string>
}

export interface WorkspaceServiceUpdateWorkspaceRequest {
  body: ChorusUpdateWorkspaceRequest
}

/**
 *
 */
export class WorkspaceServiceApi extends runtime.BaseAPI {
  /**
   * This endpoint creates a workspace
   * Create a workspace
   */
  async workspaceServiceCreateWorkspaceRaw(
    requestParameters: WorkspaceServiceCreateWorkspaceRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ChorusCreateWorkspaceReply>> {
    if (
      requestParameters.body === null ||
      requestParameters.body === undefined
    ) {
      throw new runtime.RequiredError(
        'body',
        'Required parameter requestParameters.body was null or undefined when calling workspaceServiceCreateWorkspace.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] =
        this.configuration.apiKey('Authorization') // bearer authentication
    }

    const response = await this.request(
      {
        path: `/api/rest/v1/workspaces`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: ChorusWorkspaceToJSON(requestParameters.body)
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ChorusCreateWorkspaceReplyFromJSON(jsonValue)
    )
  }

  /**
   * This endpoint creates a workspace
   * Create a workspace
   */
  async workspaceServiceCreateWorkspace(
    requestParameters: WorkspaceServiceCreateWorkspaceRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ChorusCreateWorkspaceReply> {
    const response = await this.workspaceServiceCreateWorkspaceRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   * This endpoint deletes a workspace
   * Delete a workspace
   */
  async workspaceServiceDeleteWorkspaceRaw(
    requestParameters: WorkspaceServiceDeleteWorkspaceRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ChorusDeleteWorkspaceReply>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling workspaceServiceDeleteWorkspace.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] =
        this.configuration.apiKey('Authorization') // bearer authentication
    }

    const response = await this.request(
      {
        path: `/api/rest/v1/workspaces/{id}`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ChorusDeleteWorkspaceReplyFromJSON(jsonValue)
    )
  }

  /**
   * This endpoint deletes a workspace
   * Delete a workspace
   */
  async workspaceServiceDeleteWorkspace(
    requestParameters: WorkspaceServiceDeleteWorkspaceRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ChorusDeleteWorkspaceReply> {
    const response = await this.workspaceServiceDeleteWorkspaceRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   * This endpoint returns a workspace
   * Get a workspace
   */
  async workspaceServiceGetWorkspaceRaw(
    requestParameters: WorkspaceServiceGetWorkspaceRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ChorusGetWorkspaceReply>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling workspaceServiceGetWorkspace.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] =
        this.configuration.apiKey('Authorization') // bearer authentication
    }

    const response = await this.request(
      {
        path: `/api/rest/v1/workspaces/{id}`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ChorusGetWorkspaceReplyFromJSON(jsonValue)
    )
  }

  /**
   * This endpoint returns a workspace
   * Get a workspace
   */
  async workspaceServiceGetWorkspace(
    requestParameters: WorkspaceServiceGetWorkspaceRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ChorusGetWorkspaceReply> {
    const response = await this.workspaceServiceGetWorkspaceRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   * This endpoint returns a list of workspaces
   * List workspaces
   */
  async workspaceServiceListWorkspacesRaw(
    requestParameters: WorkspaceServiceListWorkspacesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ChorusListWorkspacesReply>> {
    const queryParameters: any = {}

    if (requestParameters.paginationOffset !== undefined) {
      queryParameters['pagination.offset'] = requestParameters.paginationOffset
    }

    if (requestParameters.paginationLimit !== undefined) {
      queryParameters['pagination.limit'] = requestParameters.paginationLimit
    }

    if (requestParameters.paginationSortOrder !== undefined) {
      queryParameters['pagination.sort.order'] =
        requestParameters.paginationSortOrder
    }

    if (requestParameters.paginationSortType !== undefined) {
      queryParameters['pagination.sort.type'] =
        requestParameters.paginationSortType
    }

    if (requestParameters.paginationQuery) {
      queryParameters['pagination.query'] = requestParameters.paginationQuery
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] =
        this.configuration.apiKey('Authorization') // bearer authentication
    }

    const response = await this.request(
      {
        path: `/api/rest/v1/workspaces`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ChorusListWorkspacesReplyFromJSON(jsonValue)
    )
  }

  /**
   * This endpoint returns a list of workspaces
   * List workspaces
   */
  async workspaceServiceListWorkspaces(
    requestParameters: WorkspaceServiceListWorkspacesRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ChorusListWorkspacesReply> {
    const response = await this.workspaceServiceListWorkspacesRaw(
      requestParameters,
      initOverrides
    )
    const r = await response.value()

    return r
  }

  /**
   * This endpoint updates a workspace
   * Update a workspace
   */
  async workspaceServiceUpdateWorkspaceRaw(
    requestParameters: WorkspaceServiceUpdateWorkspaceRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ChorusUpdateWorkspaceReply>> {
    if (
      requestParameters.body === null ||
      requestParameters.body === undefined
    ) {
      throw new runtime.RequiredError(
        'body',
        'Required parameter requestParameters.body was null or undefined when calling workspaceServiceUpdateWorkspace.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] =
        this.configuration.apiKey('Authorization') // bearer authentication
    }

    const response = await this.request(
      {
        path: `/api/rest/v1/workspaces`,
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: ChorusUpdateWorkspaceRequestToJSON(requestParameters.body)
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ChorusUpdateWorkspaceReplyFromJSON(jsonValue)
    )
  }

  /**
   * This endpoint updates a workspace
   * Update a workspace
   */
  async workspaceServiceUpdateWorkspace(
    requestParameters: WorkspaceServiceUpdateWorkspaceRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ChorusUpdateWorkspaceReply> {
    const response = await this.workspaceServiceUpdateWorkspaceRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }
}
