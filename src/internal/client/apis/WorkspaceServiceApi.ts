/* tslint:disable */
/* eslint-disable */
/**
 * CHORUS backend API
 * CHORUS backend API documentation
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime'
import type {
  ChorusCreateWorkspaceFileReply,
  ChorusCreateWorkspaceReply,
  ChorusDeleteWorkspaceFileReply,
  ChorusDeleteWorkspaceReply,
  ChorusGetWorkspaceFileReply,
  ChorusGetWorkspaceReply,
  ChorusListWorkspacesReply,
  ChorusManageUserRoleInWorkspaceReply,
  ChorusRemoveUserFromWorkspaceReply,
  ChorusUpdateWorkspaceFileReply,
  ChorusUpdateWorkspaceReply,
  ChorusWorkspace,
  ChorusWorkspaceFile,
  RpcStatus,
  WorkspaceServiceManageUserRoleInWorkspaceBody
} from '../models/index'
import {
  ChorusCreateWorkspaceFileReplyFromJSON,
  ChorusCreateWorkspaceFileReplyToJSON,
  ChorusCreateWorkspaceReplyFromJSON,
  ChorusCreateWorkspaceReplyToJSON,
  ChorusDeleteWorkspaceFileReplyFromJSON,
  ChorusDeleteWorkspaceFileReplyToJSON,
  ChorusDeleteWorkspaceReplyFromJSON,
  ChorusDeleteWorkspaceReplyToJSON,
  ChorusGetWorkspaceFileReplyFromJSON,
  ChorusGetWorkspaceFileReplyToJSON,
  ChorusGetWorkspaceReplyFromJSON,
  ChorusGetWorkspaceReplyToJSON,
  ChorusListWorkspacesReplyFromJSON,
  ChorusListWorkspacesReplyToJSON,
  ChorusManageUserRoleInWorkspaceReplyFromJSON,
  ChorusManageUserRoleInWorkspaceReplyToJSON,
  ChorusRemoveUserFromWorkspaceReplyFromJSON,
  ChorusRemoveUserFromWorkspaceReplyToJSON,
  ChorusUpdateWorkspaceFileReplyFromJSON,
  ChorusUpdateWorkspaceFileReplyToJSON,
  ChorusUpdateWorkspaceReplyFromJSON,
  ChorusUpdateWorkspaceReplyToJSON,
  ChorusWorkspaceFromJSON,
  ChorusWorkspaceToJSON,
  ChorusWorkspaceFileFromJSON,
  ChorusWorkspaceFileToJSON,
  RpcStatusFromJSON,
  RpcStatusToJSON,
  WorkspaceServiceManageUserRoleInWorkspaceBodyFromJSON,
  WorkspaceServiceManageUserRoleInWorkspaceBodyToJSON
} from '../models/index'

export interface WorkspaceServiceCreateWorkspaceRequest {
  body: ChorusWorkspace
}

export interface WorkspaceServiceCreateWorkspaceFileRequest {
  workspaceId: string
  file: ChorusWorkspaceFile
}

export interface WorkspaceServiceDeleteWorkspaceRequest {
  id: string
}

export interface WorkspaceServiceDeleteWorkspaceFileRequest {
  workspaceId: string
  path: string
}

export interface WorkspaceServiceGetWorkspaceRequest {
  id: string
}

export interface WorkspaceServiceGetWorkspaceFileRequest {
  workspaceId: string
  path: string
}

export interface WorkspaceServiceListWorkspacesRequest {
  paginationOffset?: number
  paginationLimit?: number
  paginationSortOrder?: string
  paginationSortType?: string
  paginationQuery?: Array<string>
  filterWorkspaceIdsIn?: Array<string>
}

export interface WorkspaceServiceManageUserRoleInWorkspaceRequest {
  id: string
  userId: string
  body: WorkspaceServiceManageUserRoleInWorkspaceBody
}

export interface WorkspaceServiceRemoveUserFromWorkspaceRequest {
  id: string
  userId: string
}

export interface WorkspaceServiceUpdateWorkspaceRequest {
  body: ChorusWorkspace
}

export interface WorkspaceServiceUpdateWorkspaceFileRequest {
  workspaceId: string
  oldPath: string
  file: ChorusWorkspaceFile
}

/**
 *
 */
export class WorkspaceServiceApi extends runtime.BaseAPI {
  /**
   * This endpoint creates a workspace
   * Create a workspace
   */
  async workspaceServiceCreateWorkspaceRaw(
    requestParameters: WorkspaceServiceCreateWorkspaceRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ChorusCreateWorkspaceReply>> {
    if (
      requestParameters.body === null ||
      requestParameters.body === undefined
    ) {
      throw new runtime.RequiredError(
        'body',
        'Required parameter requestParameters.body was null or undefined when calling workspaceServiceCreateWorkspace.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] =
        this.configuration.apiKey('Authorization') // bearer authentication
    }

    const response = await this.request(
      {
        path: `/api/rest/v1/workspaces`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: ChorusWorkspaceToJSON(requestParameters.body)
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ChorusCreateWorkspaceReplyFromJSON(jsonValue)
    )
  }

  /**
   * This endpoint creates a workspace
   * Create a workspace
   */
  async workspaceServiceCreateWorkspace(
    requestParameters: WorkspaceServiceCreateWorkspaceRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ChorusCreateWorkspaceReply> {
    const response = await this.workspaceServiceCreateWorkspaceRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   * This endpoint creates a file in a workspace at the specified path
   * Create a file in a workspace
   */
  async workspaceServiceCreateWorkspaceFileRaw(
    requestParameters: WorkspaceServiceCreateWorkspaceFileRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ChorusCreateWorkspaceFileReply>> {
    if (
      requestParameters.workspaceId === null ||
      requestParameters.workspaceId === undefined
    ) {
      throw new runtime.RequiredError(
        'workspaceId',
        'Required parameter requestParameters.workspaceId was null or undefined when calling workspaceServiceCreateWorkspaceFile.'
      )
    }

    if (
      requestParameters.file === null ||
      requestParameters.file === undefined
    ) {
      throw new runtime.RequiredError(
        'file',
        'Required parameter requestParameters.file was null or undefined when calling workspaceServiceCreateWorkspaceFile.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] =
        this.configuration.apiKey('Authorization') // bearer authentication
    }

    const response = await this.request(
      {
        path: `/api/rest/v1/workspaces/{workspaceId}/files`.replace(
          `{${'workspaceId'}}`,
          encodeURIComponent(String(requestParameters.workspaceId))
        ),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: ChorusWorkspaceFileToJSON(requestParameters.file)
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ChorusCreateWorkspaceFileReplyFromJSON(jsonValue)
    )
  }

  /**
   * This endpoint creates a file in a workspace at the specified path
   * Create a file in a workspace
   */
  async workspaceServiceCreateWorkspaceFile(
    requestParameters: WorkspaceServiceCreateWorkspaceFileRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ChorusCreateWorkspaceFileReply> {
    const response = await this.workspaceServiceCreateWorkspaceFileRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   * This endpoint deletes a workspace
   * Delete a workspace
   */
  async workspaceServiceDeleteWorkspaceRaw(
    requestParameters: WorkspaceServiceDeleteWorkspaceRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ChorusDeleteWorkspaceReply>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling workspaceServiceDeleteWorkspace.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] =
        this.configuration.apiKey('Authorization') // bearer authentication
    }

    const response = await this.request(
      {
        path: `/api/rest/v1/workspaces/{id}`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ChorusDeleteWorkspaceReplyFromJSON(jsonValue)
    )
  }

  /**
   * This endpoint deletes a workspace
   * Delete a workspace
   */
  async workspaceServiceDeleteWorkspace(
    requestParameters: WorkspaceServiceDeleteWorkspaceRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ChorusDeleteWorkspaceReply> {
    const response = await this.workspaceServiceDeleteWorkspaceRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   * This endpoint deletes a file in a workspace at the specified path
   * Delete a file in a workspace
   */
  async workspaceServiceDeleteWorkspaceFileRaw(
    requestParameters: WorkspaceServiceDeleteWorkspaceFileRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ChorusDeleteWorkspaceFileReply>> {
    if (
      requestParameters.workspaceId === null ||
      requestParameters.workspaceId === undefined
    ) {
      throw new runtime.RequiredError(
        'workspaceId',
        'Required parameter requestParameters.workspaceId was null or undefined when calling workspaceServiceDeleteWorkspaceFile.'
      )
    }

    if (
      requestParameters.path === null ||
      requestParameters.path === undefined
    ) {
      throw new runtime.RequiredError(
        'path',
        'Required parameter requestParameters.path was null or undefined when calling workspaceServiceDeleteWorkspaceFile.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] =
        this.configuration.apiKey('Authorization') // bearer authentication
    }

    const response = await this.request(
      {
        path: `/api/rest/v1/workspaces/{workspaceId}/files/{path}`
          .replace(
            `{${'workspaceId'}}`,
            encodeURIComponent(String(requestParameters.workspaceId))
          )
          .replace(
            `{${'path'}}`,
            encodeURIComponent(String(requestParameters.path))
          ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ChorusDeleteWorkspaceFileReplyFromJSON(jsonValue)
    )
  }

  /**
   * This endpoint deletes a file in a workspace at the specified path
   * Delete a file in a workspace
   */
  async workspaceServiceDeleteWorkspaceFile(
    requestParameters: WorkspaceServiceDeleteWorkspaceFileRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ChorusDeleteWorkspaceFileReply> {
    const response = await this.workspaceServiceDeleteWorkspaceFileRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   * This endpoint returns a workspace
   * Get a workspace
   */
  async workspaceServiceGetWorkspaceRaw(
    requestParameters: WorkspaceServiceGetWorkspaceRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ChorusGetWorkspaceReply>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling workspaceServiceGetWorkspace.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] =
        this.configuration.apiKey('Authorization') // bearer authentication
    }

    const response = await this.request(
      {
        path: `/api/rest/v1/workspaces/{id}`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ChorusGetWorkspaceReplyFromJSON(jsonValue)
    )
  }

  /**
   * This endpoint returns a workspace
   * Get a workspace
   */
  async workspaceServiceGetWorkspace(
    requestParameters: WorkspaceServiceGetWorkspaceRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ChorusGetWorkspaceReply> {
    const response = await this.workspaceServiceGetWorkspaceRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   * This endpoint lists all files at given path within a workspace
   * List files in a workspace
   */
  async workspaceServiceGetWorkspaceFileRaw(
    requestParameters: WorkspaceServiceGetWorkspaceFileRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ChorusGetWorkspaceFileReply>> {
    if (
      requestParameters.workspaceId === null ||
      requestParameters.workspaceId === undefined
    ) {
      throw new runtime.RequiredError(
        'workspaceId',
        'Required parameter requestParameters.workspaceId was null or undefined when calling workspaceServiceGetWorkspaceFile.'
      )
    }

    if (
      requestParameters.path === null ||
      requestParameters.path === undefined
    ) {
      throw new runtime.RequiredError(
        'path',
        'Required parameter requestParameters.path was null or undefined when calling workspaceServiceGetWorkspaceFile.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] =
        this.configuration.apiKey('Authorization') // bearer authentication
    }

    const response = await this.request(
      {
        path: `/api/rest/v1/workspaces/{workspaceId}/files/{path}`
          .replace(
            `{${'workspaceId'}}`,
            encodeURIComponent(String(requestParameters.workspaceId))
          )
          .replace(
            `{${'path'}}`,
            encodeURIComponent(String(requestParameters.path))
          ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ChorusGetWorkspaceFileReplyFromJSON(jsonValue)
    )
  }

  /**
   * This endpoint lists all files at given path within a workspace
   * List files in a workspace
   */
  async workspaceServiceGetWorkspaceFile(
    requestParameters: WorkspaceServiceGetWorkspaceFileRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ChorusGetWorkspaceFileReply> {
    const response = await this.workspaceServiceGetWorkspaceFileRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   * This endpoint returns a list of workspaces
   * List workspaces
   */
  async workspaceServiceListWorkspacesRaw(
    requestParameters: WorkspaceServiceListWorkspacesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ChorusListWorkspacesReply>> {
    const queryParameters: any = {}

    if (requestParameters.paginationOffset !== undefined) {
      queryParameters['pagination.offset'] = requestParameters.paginationOffset
    }

    if (requestParameters.paginationLimit !== undefined) {
      queryParameters['pagination.limit'] = requestParameters.paginationLimit
    }

    if (requestParameters.paginationSortOrder !== undefined) {
      queryParameters['pagination.sort.order'] =
        requestParameters.paginationSortOrder
    }

    if (requestParameters.paginationSortType !== undefined) {
      queryParameters['pagination.sort.type'] =
        requestParameters.paginationSortType
    }

    if (requestParameters.paginationQuery) {
      queryParameters['pagination.query'] = requestParameters.paginationQuery
    }

    if (requestParameters.filterWorkspaceIdsIn) {
      queryParameters['filter.workspaceIdsIn'] =
        requestParameters.filterWorkspaceIdsIn
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] =
        this.configuration.apiKey('Authorization') // bearer authentication
    }

    const response = await this.request(
      {
        path: `/api/rest/v1/workspaces`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ChorusListWorkspacesReplyFromJSON(jsonValue)
    )
  }

  /**
   * This endpoint returns a list of workspaces
   * List workspaces
   */
  async workspaceServiceListWorkspaces(
    requestParameters: WorkspaceServiceListWorkspacesRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ChorusListWorkspacesReply> {
    const response = await this.workspaceServiceListWorkspacesRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   * This endpoint manages a user\'s role in a workspace
   * Manage a user\'s role in a workspace
   */
  async workspaceServiceManageUserRoleInWorkspaceRaw(
    requestParameters: WorkspaceServiceManageUserRoleInWorkspaceRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ChorusManageUserRoleInWorkspaceReply>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling workspaceServiceManageUserRoleInWorkspace.'
      )
    }

    if (
      requestParameters.userId === null ||
      requestParameters.userId === undefined
    ) {
      throw new runtime.RequiredError(
        'userId',
        'Required parameter requestParameters.userId was null or undefined when calling workspaceServiceManageUserRoleInWorkspace.'
      )
    }

    if (
      requestParameters.body === null ||
      requestParameters.body === undefined
    ) {
      throw new runtime.RequiredError(
        'body',
        'Required parameter requestParameters.body was null or undefined when calling workspaceServiceManageUserRoleInWorkspace.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] =
        this.configuration.apiKey('Authorization') // bearer authentication
    }

    const response = await this.request(
      {
        path: `/api/rest/v1/workspaces/{id}/user/{userId}/role`
          .replace(
            `{${'id'}}`,
            encodeURIComponent(String(requestParameters.id))
          )
          .replace(
            `{${'userId'}}`,
            encodeURIComponent(String(requestParameters.userId))
          ),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: WorkspaceServiceManageUserRoleInWorkspaceBodyToJSON(
          requestParameters.body
        )
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ChorusManageUserRoleInWorkspaceReplyFromJSON(jsonValue)
    )
  }

  /**
   * This endpoint manages a user\'s role in a workspace
   * Manage a user\'s role in a workspace
   */
  async workspaceServiceManageUserRoleInWorkspace(
    requestParameters: WorkspaceServiceManageUserRoleInWorkspaceRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ChorusManageUserRoleInWorkspaceReply> {
    const response = await this.workspaceServiceManageUserRoleInWorkspaceRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   * This endpoint removes a user from a workspace
   * Remove a user from a workspace
   */
  async workspaceServiceRemoveUserFromWorkspaceRaw(
    requestParameters: WorkspaceServiceRemoveUserFromWorkspaceRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ChorusRemoveUserFromWorkspaceReply>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling workspaceServiceRemoveUserFromWorkspace.'
      )
    }

    if (
      requestParameters.userId === null ||
      requestParameters.userId === undefined
    ) {
      throw new runtime.RequiredError(
        'userId',
        'Required parameter requestParameters.userId was null or undefined when calling workspaceServiceRemoveUserFromWorkspace.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] =
        this.configuration.apiKey('Authorization') // bearer authentication
    }

    const response = await this.request(
      {
        path: `/api/rest/v1/workspaces/{id}/user/{userId}`
          .replace(
            `{${'id'}}`,
            encodeURIComponent(String(requestParameters.id))
          )
          .replace(
            `{${'userId'}}`,
            encodeURIComponent(String(requestParameters.userId))
          ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ChorusRemoveUserFromWorkspaceReplyFromJSON(jsonValue)
    )
  }

  /**
   * This endpoint removes a user from a workspace
   * Remove a user from a workspace
   */
  async workspaceServiceRemoveUserFromWorkspace(
    requestParameters: WorkspaceServiceRemoveUserFromWorkspaceRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ChorusRemoveUserFromWorkspaceReply> {
    const response = await this.workspaceServiceRemoveUserFromWorkspaceRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   * This endpoint updates a workspace
   * Update a workspace
   */
  async workspaceServiceUpdateWorkspaceRaw(
    requestParameters: WorkspaceServiceUpdateWorkspaceRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ChorusUpdateWorkspaceReply>> {
    if (
      requestParameters.body === null ||
      requestParameters.body === undefined
    ) {
      throw new runtime.RequiredError(
        'body',
        'Required parameter requestParameters.body was null or undefined when calling workspaceServiceUpdateWorkspace.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] =
        this.configuration.apiKey('Authorization') // bearer authentication
    }

    const response = await this.request(
      {
        path: `/api/rest/v1/workspaces`,
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: ChorusWorkspaceToJSON(requestParameters.body)
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ChorusUpdateWorkspaceReplyFromJSON(jsonValue)
    )
  }

  /**
   * This endpoint updates a workspace
   * Update a workspace
   */
  async workspaceServiceUpdateWorkspace(
    requestParameters: WorkspaceServiceUpdateWorkspaceRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ChorusUpdateWorkspaceReply> {
    const response = await this.workspaceServiceUpdateWorkspaceRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   * This endpoint updates (rename or moves) a file in a workspace at the specified path
   * Update a file in a workspace
   */
  async workspaceServiceUpdateWorkspaceFileRaw(
    requestParameters: WorkspaceServiceUpdateWorkspaceFileRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ChorusUpdateWorkspaceFileReply>> {
    if (
      requestParameters.workspaceId === null ||
      requestParameters.workspaceId === undefined
    ) {
      throw new runtime.RequiredError(
        'workspaceId',
        'Required parameter requestParameters.workspaceId was null or undefined when calling workspaceServiceUpdateWorkspaceFile.'
      )
    }

    if (
      requestParameters.oldPath === null ||
      requestParameters.oldPath === undefined
    ) {
      throw new runtime.RequiredError(
        'oldPath',
        'Required parameter requestParameters.oldPath was null or undefined when calling workspaceServiceUpdateWorkspaceFile.'
      )
    }

    if (
      requestParameters.file === null ||
      requestParameters.file === undefined
    ) {
      throw new runtime.RequiredError(
        'file',
        'Required parameter requestParameters.file was null or undefined when calling workspaceServiceUpdateWorkspaceFile.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] =
        this.configuration.apiKey('Authorization') // bearer authentication
    }

    const response = await this.request(
      {
        path: `/api/rest/v1/workspaces/{workspaceId}/files/{oldPath}`
          .replace(
            `{${'workspaceId'}}`,
            encodeURIComponent(String(requestParameters.workspaceId))
          )
          .replace(
            `{${'oldPath'}}`,
            encodeURIComponent(String(requestParameters.oldPath))
          ),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: ChorusWorkspaceFileToJSON(requestParameters.file)
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ChorusUpdateWorkspaceFileReplyFromJSON(jsonValue)
    )
  }

  /**
   * This endpoint updates (rename or moves) a file in a workspace at the specified path
   * Update a file in a workspace
   */
  async workspaceServiceUpdateWorkspaceFile(
    requestParameters: WorkspaceServiceUpdateWorkspaceFileRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ChorusUpdateWorkspaceFileReply> {
    const response = await this.workspaceServiceUpdateWorkspaceFileRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }
}
