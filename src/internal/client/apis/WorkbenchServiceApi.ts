/* tslint:disable */
/* eslint-disable */
/**
 * CHORUS backend API
 * CHORUS backend API documentation
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime'
import type {
  ChorusCreateWorkbenchReply,
  ChorusDeleteWorkbenchReply,
  ChorusGetWorkbenchReply,
  ChorusListWorkbenchsReply,
  ChorusManageUserRoleInWorkbenchReply,
  ChorusRemoveUserFromWorkbenchReply,
  ChorusUpdateWorkbenchReply,
  ChorusWorkbench,
  RpcStatus,
  WorkbenchServiceManageUserRoleInWorkbenchBody
} from '../models/index'
import {
  ChorusCreateWorkbenchReplyFromJSON,
  ChorusCreateWorkbenchReplyToJSON,
  ChorusDeleteWorkbenchReplyFromJSON,
  ChorusDeleteWorkbenchReplyToJSON,
  ChorusGetWorkbenchReplyFromJSON,
  ChorusGetWorkbenchReplyToJSON,
  ChorusListWorkbenchsReplyFromJSON,
  ChorusListWorkbenchsReplyToJSON,
  ChorusManageUserRoleInWorkbenchReplyFromJSON,
  ChorusManageUserRoleInWorkbenchReplyToJSON,
  ChorusRemoveUserFromWorkbenchReplyFromJSON,
  ChorusRemoveUserFromWorkbenchReplyToJSON,
  ChorusUpdateWorkbenchReplyFromJSON,
  ChorusUpdateWorkbenchReplyToJSON,
  ChorusWorkbenchFromJSON,
  ChorusWorkbenchToJSON,
  RpcStatusFromJSON,
  RpcStatusToJSON,
  WorkbenchServiceManageUserRoleInWorkbenchBodyFromJSON,
  WorkbenchServiceManageUserRoleInWorkbenchBodyToJSON
} from '../models/index'

export interface WorkbenchServiceCreateWorkbenchRequest {
  body: ChorusWorkbench
}

export interface WorkbenchServiceDeleteWorkbenchRequest {
  id: string
}

export interface WorkbenchServiceGetWorkbenchRequest {
  id: string
}

export interface WorkbenchServiceListWorkbenchsRequest {
  paginationOffset?: number
  paginationLimit?: number
  paginationSortOrder?: string
  paginationSortType?: string
  paginationQuery?: Array<string>
  filterWorkspaceIdsIn?: Array<string>
}

export interface WorkbenchServiceManageUserRoleInWorkbenchRequest {
  id: string
  userId: string
  body: WorkbenchServiceManageUserRoleInWorkbenchBody
}

export interface WorkbenchServiceRemoveUserFromWorkbenchRequest {
  id: string
  userId: string
}

export interface WorkbenchServiceUpdateWorkbenchRequest {
  body: ChorusWorkbench
}

/**
 *
 */
export class WorkbenchServiceApi extends runtime.BaseAPI {
  /**
   * This endpoint creates a workbench
   * Create a workbench
   */
  async workbenchServiceCreateWorkbenchRaw(
    requestParameters: WorkbenchServiceCreateWorkbenchRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ChorusCreateWorkbenchReply>> {
    if (
      requestParameters.body === null ||
      requestParameters.body === undefined
    ) {
      throw new runtime.RequiredError(
        'body',
        'Required parameter requestParameters.body was null or undefined when calling workbenchServiceCreateWorkbench.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] =
        this.configuration.apiKey('Authorization') // bearer authentication
    }

    const response = await this.request(
      {
        path: `/api/rest/v1/workbenchs`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: ChorusWorkbenchToJSON(requestParameters.body)
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ChorusCreateWorkbenchReplyFromJSON(jsonValue)
    )
  }

  /**
   * This endpoint creates a workbench
   * Create a workbench
   */
  async workbenchServiceCreateWorkbench(
    requestParameters: WorkbenchServiceCreateWorkbenchRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ChorusCreateWorkbenchReply> {
    const response = await this.workbenchServiceCreateWorkbenchRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   * This endpoint deletes a workbench
   * Delete a workbench
   */
  async workbenchServiceDeleteWorkbenchRaw(
    requestParameters: WorkbenchServiceDeleteWorkbenchRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ChorusDeleteWorkbenchReply>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling workbenchServiceDeleteWorkbench.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] =
        this.configuration.apiKey('Authorization') // bearer authentication
    }

    const response = await this.request(
      {
        path: `/api/rest/v1/workbenchs/{id}`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ChorusDeleteWorkbenchReplyFromJSON(jsonValue)
    )
  }

  /**
   * This endpoint deletes a workbench
   * Delete a workbench
   */
  async workbenchServiceDeleteWorkbench(
    requestParameters: WorkbenchServiceDeleteWorkbenchRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ChorusDeleteWorkbenchReply> {
    const response = await this.workbenchServiceDeleteWorkbenchRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   * This endpoint returns a workbench
   * Get a workbench
   */
  async workbenchServiceGetWorkbenchRaw(
    requestParameters: WorkbenchServiceGetWorkbenchRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ChorusGetWorkbenchReply>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling workbenchServiceGetWorkbench.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] =
        this.configuration.apiKey('Authorization') // bearer authentication
    }

    const response = await this.request(
      {
        path: `/api/rest/v1/workbenchs/{id}`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ChorusGetWorkbenchReplyFromJSON(jsonValue)
    )
  }

  /**
   * This endpoint returns a workbench
   * Get a workbench
   */
  async workbenchServiceGetWorkbench(
    requestParameters: WorkbenchServiceGetWorkbenchRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ChorusGetWorkbenchReply> {
    const response = await this.workbenchServiceGetWorkbenchRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   * This endpoint returns a list of workbenchs
   * List workbenchs
   */
  async workbenchServiceListWorkbenchsRaw(
    requestParameters: WorkbenchServiceListWorkbenchsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ChorusListWorkbenchsReply>> {
    const queryParameters: any = {}

    if (requestParameters.paginationOffset !== undefined) {
      queryParameters['pagination.offset'] = requestParameters.paginationOffset
    }

    if (requestParameters.paginationLimit !== undefined) {
      queryParameters['pagination.limit'] = requestParameters.paginationLimit
    }

    if (requestParameters.paginationSortOrder !== undefined) {
      queryParameters['pagination.sort.order'] =
        requestParameters.paginationSortOrder
    }

    if (requestParameters.paginationSortType !== undefined) {
      queryParameters['pagination.sort.type'] =
        requestParameters.paginationSortType
    }

    if (requestParameters.paginationQuery) {
      queryParameters['pagination.query'] = requestParameters.paginationQuery
    }

    if (requestParameters.filterWorkspaceIdsIn) {
      queryParameters['filter.workspaceIdsIn'] =
        requestParameters.filterWorkspaceIdsIn
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] =
        this.configuration.apiKey('Authorization') // bearer authentication
    }

    const response = await this.request(
      {
        path: `/api/rest/v1/workbenchs`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ChorusListWorkbenchsReplyFromJSON(jsonValue)
    )
  }

  /**
   * This endpoint returns a list of workbenchs
   * List workbenchs
   */
  async workbenchServiceListWorkbenchs(
    requestParameters: WorkbenchServiceListWorkbenchsRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ChorusListWorkbenchsReply> {
    const response = await this.workbenchServiceListWorkbenchsRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   * This endpoint manages a user\'s role in a workbench
   * Manage a user\'s role in a workbench
   */
  async workbenchServiceManageUserRoleInWorkbenchRaw(
    requestParameters: WorkbenchServiceManageUserRoleInWorkbenchRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ChorusManageUserRoleInWorkbenchReply>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling workbenchServiceManageUserRoleInWorkbench.'
      )
    }

    if (
      requestParameters.userId === null ||
      requestParameters.userId === undefined
    ) {
      throw new runtime.RequiredError(
        'userId',
        'Required parameter requestParameters.userId was null or undefined when calling workbenchServiceManageUserRoleInWorkbench.'
      )
    }

    if (
      requestParameters.body === null ||
      requestParameters.body === undefined
    ) {
      throw new runtime.RequiredError(
        'body',
        'Required parameter requestParameters.body was null or undefined when calling workbenchServiceManageUserRoleInWorkbench.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] =
        this.configuration.apiKey('Authorization') // bearer authentication
    }

    const response = await this.request(
      {
        path: `/api/rest/v1/workbenchs/{id}/user/{userId}/role`
          .replace(
            `{${'id'}}`,
            encodeURIComponent(String(requestParameters.id))
          )
          .replace(
            `{${'userId'}}`,
            encodeURIComponent(String(requestParameters.userId))
          ),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: WorkbenchServiceManageUserRoleInWorkbenchBodyToJSON(
          requestParameters.body
        )
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ChorusManageUserRoleInWorkbenchReplyFromJSON(jsonValue)
    )
  }

  /**
   * This endpoint manages a user\'s role in a workbench
   * Manage a user\'s role in a workbench
   */
  async workbenchServiceManageUserRoleInWorkbench(
    requestParameters: WorkbenchServiceManageUserRoleInWorkbenchRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ChorusManageUserRoleInWorkbenchReply> {
    const response = await this.workbenchServiceManageUserRoleInWorkbenchRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   * This endpoint removes a user from a workbench
   * Remove a user from a workbench
   */
  async workbenchServiceRemoveUserFromWorkbenchRaw(
    requestParameters: WorkbenchServiceRemoveUserFromWorkbenchRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ChorusRemoveUserFromWorkbenchReply>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling workbenchServiceRemoveUserFromWorkbench.'
      )
    }

    if (
      requestParameters.userId === null ||
      requestParameters.userId === undefined
    ) {
      throw new runtime.RequiredError(
        'userId',
        'Required parameter requestParameters.userId was null or undefined when calling workbenchServiceRemoveUserFromWorkbench.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] =
        this.configuration.apiKey('Authorization') // bearer authentication
    }

    const response = await this.request(
      {
        path: `/api/rest/v1/workbenchs/{id}/user/{userId}`
          .replace(
            `{${'id'}}`,
            encodeURIComponent(String(requestParameters.id))
          )
          .replace(
            `{${'userId'}}`,
            encodeURIComponent(String(requestParameters.userId))
          ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ChorusRemoveUserFromWorkbenchReplyFromJSON(jsonValue)
    )
  }

  /**
   * This endpoint removes a user from a workbench
   * Remove a user from a workbench
   */
  async workbenchServiceRemoveUserFromWorkbench(
    requestParameters: WorkbenchServiceRemoveUserFromWorkbenchRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ChorusRemoveUserFromWorkbenchReply> {
    const response = await this.workbenchServiceRemoveUserFromWorkbenchRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   * This endpoint updates a workbench
   * Update a workbench
   */
  async workbenchServiceUpdateWorkbenchRaw(
    requestParameters: WorkbenchServiceUpdateWorkbenchRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ChorusUpdateWorkbenchReply>> {
    if (
      requestParameters.body === null ||
      requestParameters.body === undefined
    ) {
      throw new runtime.RequiredError(
        'body',
        'Required parameter requestParameters.body was null or undefined when calling workbenchServiceUpdateWorkbench.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] =
        this.configuration.apiKey('Authorization') // bearer authentication
    }

    const response = await this.request(
      {
        path: `/api/rest/v1/workbenchs`,
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: ChorusWorkbenchToJSON(requestParameters.body)
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ChorusUpdateWorkbenchReplyFromJSON(jsonValue)
    )
  }

  /**
   * This endpoint updates a workbench
   * Update a workbench
   */
  async workbenchServiceUpdateWorkbench(
    requestParameters: WorkbenchServiceUpdateWorkbenchRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ChorusUpdateWorkbenchReply> {
    const response = await this.workbenchServiceUpdateWorkbenchRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }
}
