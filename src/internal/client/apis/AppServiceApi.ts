/* tslint:disable */
/* eslint-disable */
/**
 * CHORUS backend API
 * CHORUS backend API documentation
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime'
import type {
  ChorusApp,
  ChorusCreateAppReply,
  ChorusDeleteAppReply,
  ChorusGetAppReply,
  ChorusListAppsReply,
  ChorusUpdateAppReply,
  ChorusUpdateAppRequest,
  RpcStatus
} from '../models/index'
import {
  ChorusAppFromJSON,
  ChorusAppToJSON,
  ChorusCreateAppReplyFromJSON,
  ChorusCreateAppReplyToJSON,
  ChorusDeleteAppReplyFromJSON,
  ChorusDeleteAppReplyToJSON,
  ChorusGetAppReplyFromJSON,
  ChorusGetAppReplyToJSON,
  ChorusListAppsReplyFromJSON,
  ChorusListAppsReplyToJSON,
  ChorusUpdateAppReplyFromJSON,
  ChorusUpdateAppReplyToJSON,
  ChorusUpdateAppRequestFromJSON,
  ChorusUpdateAppRequestToJSON,
  RpcStatusFromJSON,
  RpcStatusToJSON
} from '../models/index'

export interface AppServiceCreateAppRequest {
  body: ChorusApp
}

export interface AppServiceDeleteAppRequest {
  id: string
}

export interface AppServiceGetAppRequest {
  id: string
}

export interface AppServiceListAppsRequest {
  paginationOffset?: number
  paginationLimit?: number
  paginationSortOrder?: string
  paginationSortType?: string
  paginationQuery?: Array<string>
}

export interface AppServiceUpdateAppRequest {
  body: ChorusUpdateAppRequest
}

/**
 *
 */
export class AppServiceApi extends runtime.BaseAPI {
  /**
   * This endpoint creates an app
   * Create an app
   */
  async appServiceCreateAppRaw(
    requestParameters: AppServiceCreateAppRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ChorusCreateAppReply>> {
    if (
      requestParameters.body === null ||
      requestParameters.body === undefined
    ) {
      throw new runtime.RequiredError(
        'body',
        'Required parameter requestParameters.body was null or undefined when calling appServiceCreateApp.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] =
        this.configuration.apiKey('Authorization') // bearer authentication
    }

    const response = await this.request(
      {
        path: `/api/rest/v1/apps`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: ChorusAppToJSON(requestParameters.body)
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ChorusCreateAppReplyFromJSON(jsonValue)
    )
  }

  /**
   * This endpoint creates an app
   * Create an app
   */
  async appServiceCreateApp(
    requestParameters: AppServiceCreateAppRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ChorusCreateAppReply> {
    const response = await this.appServiceCreateAppRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   * This endpoint deletes an app
   * Delete an app
   */
  async appServiceDeleteAppRaw(
    requestParameters: AppServiceDeleteAppRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ChorusDeleteAppReply>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling appServiceDeleteApp.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] =
        this.configuration.apiKey('Authorization') // bearer authentication
    }

    const response = await this.request(
      {
        path: `/api/rest/v1/apps/{id}`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ChorusDeleteAppReplyFromJSON(jsonValue)
    )
  }

  /**
   * This endpoint deletes an app
   * Delete an app
   */
  async appServiceDeleteApp(
    requestParameters: AppServiceDeleteAppRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ChorusDeleteAppReply> {
    const response = await this.appServiceDeleteAppRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   * This endpoint returns an app
   * Get an app
   */
  async appServiceGetAppRaw(
    requestParameters: AppServiceGetAppRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ChorusGetAppReply>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling appServiceGetApp.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] =
        this.configuration.apiKey('Authorization') // bearer authentication
    }

    const response = await this.request(
      {
        path: `/api/rest/v1/apps/{id}`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ChorusGetAppReplyFromJSON(jsonValue)
    )
  }

  /**
   * This endpoint returns an app
   * Get an app
   */
  async appServiceGetApp(
    requestParameters: AppServiceGetAppRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ChorusGetAppReply> {
    const response = await this.appServiceGetAppRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   * This endpoint returns a list of apps
   * List apps
   */
  async appServiceListAppsRaw(
    requestParameters: AppServiceListAppsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ChorusListAppsReply>> {
    const queryParameters: any = {}

    if (requestParameters.paginationOffset !== undefined) {
      queryParameters['pagination.offset'] = requestParameters.paginationOffset
    }

    if (requestParameters.paginationLimit !== undefined) {
      queryParameters['pagination.limit'] = requestParameters.paginationLimit
    }

    if (requestParameters.paginationSortOrder !== undefined) {
      queryParameters['pagination.sort.order'] =
        requestParameters.paginationSortOrder
    }

    if (requestParameters.paginationSortType !== undefined) {
      queryParameters['pagination.sort.type'] =
        requestParameters.paginationSortType
    }

    if (requestParameters.paginationQuery) {
      queryParameters['pagination.query'] = requestParameters.paginationQuery
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] =
        this.configuration.apiKey('Authorization') // bearer authentication
    }

    const response = await this.request(
      {
        path: `/api/rest/v1/apps`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ChorusListAppsReplyFromJSON(jsonValue)
    )
  }

  /**
   * This endpoint returns a list of apps
   * List apps
   */
  async appServiceListApps(
    requestParameters: AppServiceListAppsRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ChorusListAppsReply> {
    const response = await this.appServiceListAppsRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   * This endpoint updates an app
   * Update an app
   */
  async appServiceUpdateAppRaw(
    requestParameters: AppServiceUpdateAppRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ChorusUpdateAppReply>> {
    if (
      requestParameters.body === null ||
      requestParameters.body === undefined
    ) {
      throw new runtime.RequiredError(
        'body',
        'Required parameter requestParameters.body was null or undefined when calling appServiceUpdateApp.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] =
        this.configuration.apiKey('Authorization') // bearer authentication
    }

    const response = await this.request(
      {
        path: `/api/rest/v1/apps`,
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: ChorusUpdateAppRequestToJSON(requestParameters.body)
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ChorusUpdateAppReplyFromJSON(jsonValue)
    )
  }

  /**
   * This endpoint updates an app
   * Update an app
   */
  async appServiceUpdateApp(
    requestParameters: AppServiceUpdateAppRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ChorusUpdateAppReply> {
    const response = await this.appServiceUpdateAppRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }
}
