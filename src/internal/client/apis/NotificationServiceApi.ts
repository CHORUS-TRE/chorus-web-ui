/* tslint:disable */
/* eslint-disable */
/**
 * CHORUS backend API
 * CHORUS backend API documentation
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type {
  ChorusCountUnreadNotificationsReply,
  ChorusGetNotificationsReply,
  ChorusMarkNotificationsAsReadRequest
} from '../models/index'
import {
  ChorusCountUnreadNotificationsReplyFromJSON,
  ChorusGetNotificationsReplyFromJSON,
  ChorusMarkNotificationsAsReadRequestToJSON
} from '../models/index'
import * as runtime from '../runtime'

export interface NotificationServiceGetNotificationsRequest {
  paginationOffset?: number
  paginationLimit?: number
  paginationSortOrder?: string
  paginationSortType?: string
  paginationQuery?: Array<string>
  isRead?: boolean
}

export interface NotificationServiceMarkNotificationsAsReadRequest {
  body: ChorusMarkNotificationsAsReadRequest
}

/**
 *
 */
export class NotificationServiceApi extends runtime.BaseAPI {
  /**
   * This endpoint returns the amount of unread notifications
   * Count unread notifications
   */
  async notificationServiceCountUnreadNotificationsRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ChorusCountUnreadNotificationsReply>> {
    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] =
        this.configuration.apiKey('Authorization') // bearer authentication
    }

    const response = await this.request(
      {
        path: `/api/rest/v1/notifications/count`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ChorusCountUnreadNotificationsReplyFromJSON(jsonValue)
    )
  }

  /**
   * This endpoint returns the amount of unread notifications
   * Count unread notifications
   */
  async notificationServiceCountUnreadNotifications(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ChorusCountUnreadNotificationsReply> {
    const response =
      await this.notificationServiceCountUnreadNotificationsRaw(initOverrides)
    return await response.value()
  }

  /**
   * This endpoint returns a list of notifications
   * List notifications
   */
  async notificationServiceGetNotificationsRaw(
    requestParameters: NotificationServiceGetNotificationsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ChorusGetNotificationsReply>> {
    const queryParameters: any = {}

    if (requestParameters.paginationOffset !== undefined) {
      queryParameters['pagination.offset'] = requestParameters.paginationOffset
    }

    if (requestParameters.paginationLimit !== undefined) {
      queryParameters['pagination.limit'] = requestParameters.paginationLimit
    }

    if (requestParameters.paginationSortOrder !== undefined) {
      queryParameters['pagination.sort.order'] =
        requestParameters.paginationSortOrder
    }

    if (requestParameters.paginationSortType !== undefined) {
      queryParameters['pagination.sort.type'] =
        requestParameters.paginationSortType
    }

    if (requestParameters.paginationQuery) {
      queryParameters['pagination.query'] = requestParameters.paginationQuery
    }

    if (requestParameters.isRead !== undefined) {
      queryParameters['isRead'] = requestParameters.isRead
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] =
        this.configuration.apiKey('Authorization') // bearer authentication
    }

    const response = await this.request(
      {
        path: `/api/rest/v1/notifications`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ChorusGetNotificationsReplyFromJSON(jsonValue)
    )
  }

  /**
   * This endpoint returns a list of notifications
   * List notifications
   */
  async notificationServiceGetNotifications(
    requestParameters: NotificationServiceGetNotificationsRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ChorusGetNotificationsReply> {
    const response = await this.notificationServiceGetNotificationsRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   * This endpoint marks a notification as read
   * Mark a notification as read
   */
  async notificationServiceMarkNotificationsAsReadRaw(
    requestParameters: NotificationServiceMarkNotificationsAsReadRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<object>> {
    if (
      requestParameters.body === null ||
      requestParameters.body === undefined
    ) {
      throw new runtime.RequiredError(
        'body',
        'Required parameter requestParameters.body was null or undefined when calling notificationServiceMarkNotificationsAsRead.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] =
        this.configuration.apiKey('Authorization') // bearer authentication
    }

    const response = await this.request(
      {
        path: `/api/rest/v1/notifications/read`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: ChorusMarkNotificationsAsReadRequestToJSON(requestParameters.body)
      },
      initOverrides
    )

    return new runtime.JSONApiResponse<any>(response)
  }

  /**
   * This endpoint marks a notification as read
   * Mark a notification as read
   */
  async notificationServiceMarkNotificationsAsRead(
    requestParameters: NotificationServiceMarkNotificationsAsReadRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<object> {
    const response = await this.notificationServiceMarkNotificationsAsReadRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }
}
