/* tslint:disable */
/* eslint-disable */
/**
 * CHORUS backend API
 * CHORUS backend API documentation
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime'
import type {
  ChorusAppInstance,
  ChorusCreateAppInstanceReply,
  ChorusDeleteAppInstanceReply,
  ChorusGetAppInstanceReply,
  ChorusListAppInstancesReply,
  ChorusUpdateAppInstanceReply,
  ChorusUpdateAppInstanceRequest,
  RpcStatus
} from '../models/index'
import {
  ChorusAppInstanceFromJSON,
  ChorusAppInstanceToJSON,
  ChorusCreateAppInstanceReplyFromJSON,
  ChorusCreateAppInstanceReplyToJSON,
  ChorusDeleteAppInstanceReplyFromJSON,
  ChorusDeleteAppInstanceReplyToJSON,
  ChorusGetAppInstanceReplyFromJSON,
  ChorusGetAppInstanceReplyToJSON,
  ChorusListAppInstancesReplyFromJSON,
  ChorusListAppInstancesReplyToJSON,
  ChorusUpdateAppInstanceReplyFromJSON,
  ChorusUpdateAppInstanceReplyToJSON,
  ChorusUpdateAppInstanceRequestFromJSON,
  ChorusUpdateAppInstanceRequestToJSON,
  RpcStatusFromJSON,
  RpcStatusToJSON
} from '../models/index'

export interface AppInstanceServiceCreateAppInstanceRequest {
  body: ChorusAppInstance
}

export interface AppInstanceServiceDeleteAppInstanceRequest {
  id: string
}

export interface AppInstanceServiceGetAppInstanceRequest {
  id: string
}

export interface AppInstanceServiceListAppInstancesRequest {
  paginationOffset?: number
  paginationLimit?: number
  paginationSortOrder?: string
  paginationSortType?: string
  paginationQuery?: Array<string>
}

export interface AppInstanceServiceUpdateAppInstanceRequest {
  body: ChorusUpdateAppInstanceRequest
}

/**
 *
 */
export class AppInstanceServiceApi extends runtime.BaseAPI {
  /**
   * This endpoint creates an app instance
   * Create an app instance
   */
  async appInstanceServiceCreateAppInstanceRaw(
    requestParameters: AppInstanceServiceCreateAppInstanceRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ChorusCreateAppInstanceReply>> {
    if (
      requestParameters.body === null ||
      requestParameters.body === undefined
    ) {
      throw new runtime.RequiredError(
        'body',
        'Required parameter requestParameters.body was null or undefined when calling appInstanceServiceCreateAppInstance.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] =
        this.configuration.apiKey('Authorization') // bearer authentication
    }

    const response = await this.request(
      {
        path: `/api/rest/v1/app-instances`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: ChorusAppInstanceToJSON(requestParameters.body)
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ChorusCreateAppInstanceReplyFromJSON(jsonValue)
    )
  }

  /**
   * This endpoint creates an app instance
   * Create an app instance
   */
  async appInstanceServiceCreateAppInstance(
    requestParameters: AppInstanceServiceCreateAppInstanceRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ChorusCreateAppInstanceReply> {
    const response = await this.appInstanceServiceCreateAppInstanceRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   * This endpoint deletes an app instance
   * Delete an app instance
   */
  async appInstanceServiceDeleteAppInstanceRaw(
    requestParameters: AppInstanceServiceDeleteAppInstanceRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ChorusDeleteAppInstanceReply>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling appInstanceServiceDeleteAppInstance.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] =
        this.configuration.apiKey('Authorization') // bearer authentication
    }

    const response = await this.request(
      {
        path: `/api/rest/v1/app-instances/{id}`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ChorusDeleteAppInstanceReplyFromJSON(jsonValue)
    )
  }

  /**
   * This endpoint deletes an app instance
   * Delete an app instance
   */
  async appInstanceServiceDeleteAppInstance(
    requestParameters: AppInstanceServiceDeleteAppInstanceRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ChorusDeleteAppInstanceReply> {
    const response = await this.appInstanceServiceDeleteAppInstanceRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   * This endpoint returns an app instance
   * Get an app instance
   */
  async appInstanceServiceGetAppInstanceRaw(
    requestParameters: AppInstanceServiceGetAppInstanceRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ChorusGetAppInstanceReply>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling appInstanceServiceGetAppInstance.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] =
        this.configuration.apiKey('Authorization') // bearer authentication
    }

    const response = await this.request(
      {
        path: `/api/rest/v1/app-instances/{id}`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ChorusGetAppInstanceReplyFromJSON(jsonValue)
    )
  }

  /**
   * This endpoint returns an app instance
   * Get an app instance
   */
  async appInstanceServiceGetAppInstance(
    requestParameters: AppInstanceServiceGetAppInstanceRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ChorusGetAppInstanceReply> {
    const response = await this.appInstanceServiceGetAppInstanceRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   * This endpoint returns a list of app instances
   * List app instances
   */
  async appInstanceServiceListAppInstancesRaw(
    requestParameters: AppInstanceServiceListAppInstancesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ChorusListAppInstancesReply>> {
    const queryParameters: any = {}

    if (requestParameters.paginationOffset !== undefined) {
      queryParameters['pagination.offset'] = requestParameters.paginationOffset
    }

    if (requestParameters.paginationLimit !== undefined) {
      queryParameters['pagination.limit'] = requestParameters.paginationLimit
    }

    if (requestParameters.paginationSortOrder !== undefined) {
      queryParameters['pagination.sort.order'] =
        requestParameters.paginationSortOrder
    }

    if (requestParameters.paginationSortType !== undefined) {
      queryParameters['pagination.sort.type'] =
        requestParameters.paginationSortType
    }

    if (requestParameters.paginationQuery) {
      queryParameters['pagination.query'] = requestParameters.paginationQuery
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] =
        this.configuration.apiKey('Authorization') // bearer authentication
    }

    const response = await this.request(
      {
        path: `/api/rest/v1/app-instances`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ChorusListAppInstancesReplyFromJSON(jsonValue)
    )
  }

  /**
   * This endpoint returns a list of app instances
   * List app instances
   */
  async appInstanceServiceListAppInstances(
    requestParameters: AppInstanceServiceListAppInstancesRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ChorusListAppInstancesReply> {
    const response = await this.appInstanceServiceListAppInstancesRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   * This endpoint updates an app instance
   * Update an app instance
   */
  async appInstanceServiceUpdateAppInstanceRaw(
    requestParameters: AppInstanceServiceUpdateAppInstanceRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ChorusUpdateAppInstanceReply>> {
    if (
      requestParameters.body === null ||
      requestParameters.body === undefined
    ) {
      throw new runtime.RequiredError(
        'body',
        'Required parameter requestParameters.body was null or undefined when calling appInstanceServiceUpdateAppInstance.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] =
        this.configuration.apiKey('Authorization') // bearer authentication
    }

    const response = await this.request(
      {
        path: `/api/rest/v1/app-instances`,
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: ChorusUpdateAppInstanceRequestToJSON(requestParameters.body)
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ChorusUpdateAppInstanceReplyFromJSON(jsonValue)
    )
  }

  /**
   * This endpoint updates an app instance
   * Update an app instance
   */
  async appInstanceServiceUpdateAppInstance(
    requestParameters: AppInstanceServiceUpdateAppInstanceRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ChorusUpdateAppInstanceReply> {
    const response = await this.appInstanceServiceUpdateAppInstanceRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }
}
