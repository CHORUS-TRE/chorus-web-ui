/* tslint:disable */
/* eslint-disable */
/**
 * CHORUS backend API
 * CHORUS backend API documentation
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime'
import type { ChorusSort } from './ChorusSort'
import {
  ChorusSortFromJSON,
  ChorusSortFromJSONTyped,
  ChorusSortToJSON
} from './ChorusSort'

/**
 *
 * @export
 * @interface ChorusPaginationQuery
 */
export interface ChorusPaginationQuery {
  /**
   * Optionally offset the number of results
   * @type {number}
   * @memberof ChorusPaginationQuery
   */
  offset?: number
  /**
   * Optionally limit the number of results (between 1 and 500)
   * @type {number}
   * @memberof ChorusPaginationQuery
   */
  limit?: number
  /**
   *
   * @type {ChorusSort}
   * @memberof ChorusPaginationQuery
   */
  sort?: ChorusSort
  /**
   * Optionally filter the results
   * @type {Array<string>}
   * @memberof ChorusPaginationQuery
   */
  query?: Array<string>
}

/**
 * Check if a given object implements the ChorusPaginationQuery interface.
 */
export function instanceOfChorusPaginationQuery(value: object): boolean {
  let isInstance = true

  return isInstance
}

export function ChorusPaginationQueryFromJSON(
  json: any
): ChorusPaginationQuery {
  return ChorusPaginationQueryFromJSONTyped(json, false)
}

export function ChorusPaginationQueryFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): ChorusPaginationQuery {
  if (json === undefined || json === null) {
    return json
  }
  return {
    offset: !exists(json, 'offset') ? undefined : json['offset'],
    limit: !exists(json, 'limit') ? undefined : json['limit'],
    sort: !exists(json, 'sort') ? undefined : ChorusSortFromJSON(json['sort']),
    query: !exists(json, 'query') ? undefined : json['query']
  }
}

export function ChorusPaginationQueryToJSON(
  value?: ChorusPaginationQuery | null
): any {
  if (value === undefined) {
    return undefined
  }
  if (value === null) {
    return null
  }
  return {
    offset: value.offset,
    limit: value.limit,
    sort: ChorusSortToJSON(value.sort),
    query: value.query
  }
}
