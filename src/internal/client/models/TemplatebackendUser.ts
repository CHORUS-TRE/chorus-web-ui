/* tslint:disable */
/* eslint-disable */
/**
 * template backend
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: development.bdsc@chuv.ch
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime'
/**
 *
 * @export
 * @interface TemplatebackendUser
 */
export interface TemplatebackendUser {
  /**
   *
   * @type {string}
   * @memberof TemplatebackendUser
   */
  id?: string
  /**
   *
   * @type {string}
   * @memberof TemplatebackendUser
   */
  firstName?: string
  /**
   *
   * @type {string}
   * @memberof TemplatebackendUser
   */
  lastName?: string
  /**
   *
   * @type {string}
   * @memberof TemplatebackendUser
   */
  username?: string
  /**
   *
   * @type {string}
   * @memberof TemplatebackendUser
   */
  email?: string
  /**
   *
   * @type {string}
   * @memberof TemplatebackendUser
   */
  password?: string
  /**
   *
   * @type {string}
   * @memberof TemplatebackendUser
   */
  status?: string
  /**
   *
   * @type {Array<string>}
   * @memberof TemplatebackendUser
   */
  roles?: Array<string>
  /**
   *
   * @type {boolean}
   * @memberof TemplatebackendUser
   */
  totpEnabled?: boolean
  /**
   *
   * @type {Date}
   * @memberof TemplatebackendUser
   */
  createdAt?: Date
  /**
   *
   * @type {Date}
   * @memberof TemplatebackendUser
   */
  updatedAt?: Date
  /**
   *
   * @type {boolean}
   * @memberof TemplatebackendUser
   */
  passwordChanged?: boolean
}

/**
 * Check if a given object implements the TemplatebackendUser interface.
 */
export function instanceOfTemplatebackendUser(value: object): boolean {
  let isInstance = true

  return isInstance
}

export function TemplatebackendUserFromJSON(json: any): TemplatebackendUser {
  return TemplatebackendUserFromJSONTyped(json, false)
}

export function TemplatebackendUserFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): TemplatebackendUser {
  if (json === undefined || json === null) {
    return json
  }
  return {
    id: !exists(json, 'id') ? undefined : json['id'],
    firstName: !exists(json, 'firstName') ? undefined : json['firstName'],
    lastName: !exists(json, 'lastName') ? undefined : json['lastName'],
    username: !exists(json, 'username') ? undefined : json['username'],
    email: !exists(json, 'email') ? undefined : json['email'],
    password: !exists(json, 'password') ? undefined : json['password'],
    status: !exists(json, 'status') ? undefined : json['status'],
    roles: !exists(json, 'roles') ? undefined : json['roles'],
    totpEnabled: !exists(json, 'totpEnabled') ? undefined : json['totpEnabled'],
    createdAt: !exists(json, 'createdAt')
      ? undefined
      : new Date(json['createdAt']),
    updatedAt: !exists(json, 'updatedAt')
      ? undefined
      : new Date(json['updatedAt']),
    passwordChanged: !exists(json, 'passwordChanged')
      ? undefined
      : json['passwordChanged']
  }
}

export function TemplatebackendUserToJSON(
  value?: TemplatebackendUser | null
): any {
  if (value === undefined) {
    return undefined
  }
  if (value === null) {
    return null
  }
  return {
    id: value.id,
    firstName: value.firstName,
    lastName: value.lastName,
    username: value.username,
    email: value.email,
    password: value.password,
    status: value.status,
    roles: value.roles,
    totpEnabled: value.totpEnabled,
    createdAt:
      value.createdAt === undefined ? undefined : value.createdAt.toISOString(),
    updatedAt:
      value.updatedAt === undefined ? undefined : value.updatedAt.toISOString(),
    passwordChanged: value.passwordChanged
  }
}
