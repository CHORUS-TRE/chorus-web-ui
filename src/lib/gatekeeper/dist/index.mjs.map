{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import type { User, Role, Permission, AuthorizationSchema } from './types'\nexport * from './types'\n\n// Define types for the Go object and its methods if not already globally declared\ndeclare global {\n    class Go {\n        importObject: WebAssembly.Imports\n        run(instance: WebAssembly.Instance): Promise<void>\n    }\n    // This is the initialization function exported from Go\n    function initAuthService(schema: AuthorizationSchema): GoServiceObject;\n\n    // This defines the structure of the object returned by initAuthService\n    interface GoServiceObject {\n        isUserAllowed(user: User, permission: Permission): boolean;\n        getUserPermissions(user: User): Permission[];\n    }\n}\n\nexport class AuthorizationService {\n    private static instance: AuthorizationService;\n    private initialized: boolean = false;\n    private wasmInstance: WebAssembly.Instance | null = null;\n    // This will hold the object returned by the Go initAuthService function\n    private goServiceObject: GoServiceObject | null = null;\n\n    private constructor() { }\n\n    static async init(schema: AuthorizationSchema): Promise<AuthorizationService> {\n        if (!AuthorizationService.instance) {\n            AuthorizationService.instance = new AuthorizationService();\n            await AuthorizationService.instance.initializeWasm(); // Renamed for clarity\n\n            // Ensure the global initAuthService function exists (exported from Go)\n            const initAuthServiceFunc = (globalThis as any).initAuthService;\n            if (typeof initAuthServiceFunc !== 'function') {\n                throw new Error('initAuthService function not found in WASM module. Ensure WASM loaded correctly.');\n            }\n\n            // Call the Go function to initialize the service and get the service object\n            try {\n                AuthorizationService.instance.goServiceObject = initAuthServiceFunc(schema);\n            } catch (error) {\n                 console.error(\"Error calling Go initAuthService function:\", error);\n                 throw new Error(`Failed to initialize Go service: ${error}`);\n            }\n\n\n            // Validate the structure of the returned object\n            if (!AuthorizationService.instance.goServiceObject ||\n                typeof AuthorizationService.instance.goServiceObject.isUserAllowed !== 'function' ||\n                typeof AuthorizationService.instance.goServiceObject.getUserPermissions !== 'function') {\n                console.error(\"Unexpected object returned by Go initAuthService:\", AuthorizationService.instance.goServiceObject);\n                throw new Error('WASM initAuthService did not return the expected service object structure.');\n            }\n\n             AuthorizationService.instance.initialized = true; // Mark as initialized only after successful setup\n        }\n        return AuthorizationService.instance;\n    }\n\n    // Renamed initialize to initializeWasm to avoid confusion with the static init\n    private async initializeWasm() {\n        // Load wasm_exec.js\n        if (typeof window !== 'undefined') {\n            // Browser environment\n            if (!(globalThis as any).Go) { // Load wasm_exec.js only if Go is not defined\n                 const wasmExecScript = document.createElement('script');\n\n                 // --- Try resolving path relative to the module ---\n                 let scriptSrc = './wasm_exec.js'; // Default/fallback path\n                 try {\n                     // This works well with bundlers that support import.meta.url\n                     // It constructs a URL relative to the JS module file itself.\n                     const scriptUrl = new URL('./wasm_exec.js', import.meta.url);\n                     scriptSrc = scriptUrl.href;\n                     console.log(`Resolved wasm_exec.js path using import.meta.url: ${scriptSrc}`);\n                 } catch (e) {\n                     console.warn(\"import.meta.url not supported or failed, falling back to relative path './wasm_exec.js'. Ensure wasm_exec.js is served correctly by your application server/bundler.\", e);\n                     // Keep scriptSrc as './wasm_exec.js'\n                 }\n                 wasmExecScript.src = scriptSrc;\n                 // --- End path resolution ---\n\n                 document.head.appendChild(wasmExecScript);\n                 await new Promise<void>((resolve, reject) => {\n                     wasmExecScript.onload = () => {\n                         console.log(`Successfully loaded ${wasmExecScript.src}`);\n                         resolve();\n                     }\n                     wasmExecScript.onerror = (err) => {\n                         console.error(`Failed to load wasm_exec.js from ${wasmExecScript.src}`);\n                         reject(`Failed to load wasm_exec.js from ${wasmExecScript.src}: ${err}`);\n                     }\n                 });\n            }\n        } else {\n            // Node.js environment\n             if (!(globalThis as any).Go) { // Load wasm_exec.js only if Go is not defined\n                try {\n                    // Using require for Node.js modules\n                    const path = require('path');\n                    // Make sure wasm_exec.js is copied to the dist directory by tsup\n                    require(path.join(__dirname, './wasm_exec.js'));\n                } catch (err) {\n                     throw new Error(`Failed to require wasm_exec.js in Node.js: ${err}. Ensure it's in the dist directory.`);\n                }\n            }\n        }\n\n        // Check if Go class is available after loading wasm_exec.js\n        if (!(globalThis as any).Go) {\n             throw new Error(\"Go class not found after loading wasm_exec.js\");\n        }\n\n        const go = new (globalThis as any).Go();\n\n        try {\n            let wasmModule: WebAssembly.WebAssemblyInstantiatedSource;\n            // In browser\n            if (typeof window !== 'undefined') {\n                // Use relative URL or configure bundler to handle asset path\n                 const wasmUrl = './main.wasm'; // Adjust path if needed\n                wasmModule = await WebAssembly.instantiateStreaming(\n                    fetch(wasmUrl),\n                    go.importObject\n                );\n            }\n            // In Node.js\n            else {\n                const fs = require('fs');\n                const path = require('path');\n                // Make sure main.wasm is copied to the dist directory by tsup\n                const wasmPath = path.join(__dirname, './main.wasm');\n                if (!fs.existsSync(wasmPath)) {\n                    throw new Error(`WASM file not found at ${wasmPath}. Ensure it's copied to the dist directory.`);\n                }\n                const wasmBuffer = fs.readFileSync(wasmPath);\n                wasmModule = await WebAssembly.instantiate(\n                    wasmBuffer,\n                    go.importObject\n                );\n            }\n            this.wasmInstance = wasmModule.instance;\n\n            // Don't block - let Go run in the background\n            go.run(this.wasmInstance);\n\n        } catch (error) {\n            console.error('Failed to initialize WASM:', error);\n            throw error; // Re-throw the error to be caught by the caller\n        }\n    }\n\n    isUserAllowed({ user, permission }: { user: User, permission: Permission }): boolean {\n        if (!this.initialized || !this.goServiceObject) {\n            throw new Error('AuthorizationService not initialized. Call and await init() first.');\n        }\n        try {\n            // Call method on the stored Go service object\n            return this.goServiceObject.isUserAllowed(user, permission);\n        } catch (error) {\n             console.error(\"Error calling Go isUserAllowed:\", error);\n             throw new Error(`Error executing WASM isUserAllowed: ${error}`);\n        }\n    }\n\n    getUserPermissions({ user }: { user: User }): Permission[] {\n        if (!this.initialized || !this.goServiceObject) {\n            throw new Error('AuthorizationService not initialized. Call and await init() first.');\n        }\n         try {\n            // Call method on the stored Go service object\n            return this.goServiceObject.getUserPermissions(user);\n        } catch (error) {\n             console.error(\"Error calling Go getUserPermissions:\", error);\n             throw new Error(`Error executing WASM getUserPermissions: ${error}`);\n        }\n    }\n}\n\nexport default AuthorizationService; "],"mappings":"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","names":[]}